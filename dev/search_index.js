var documenterSearchIndex = {"docs":
[{"location":"man/axislike/#axislike","page":"Axis & friends","title":"Axis & friends","text":"","category":"section"},{"location":"man/axislike/","page":"Axis & friends","title":"Axis & friends","text":"DocTestSetup = quote\n    using PGFPlotsX\nend","category":"page"},{"location":"man/axislike/","page":"Axis & friends","title":"Axis & friends","text":"This section documents constructs which are similar to Axis. In addition to options, they accept all axis elements.","category":"page"},{"location":"man/axislike/#Axis","page":"Axis & friends","title":"Axis","text":"","category":"section"},{"location":"man/axislike/","page":"Axis & friends","title":"Axis & friends","text":"Axis","category":"page"},{"location":"man/axislike/#PGFPlotsX.Axis","page":"Axis & friends","title":"PGFPlotsX.Axis","text":"Axis([options], elements...)\n\nLinear axes, corresponds to axis in PGFPlots.\n\n\n\n\n\n","category":"type"},{"location":"man/axislike/","page":"Axis & friends","title":"Axis & friends","text":"Axis make up the labels and titles etc in the figure and is the standard way of wrapping plots, represented in TeX as","category":"page"},{"location":"man/axislike/","page":"Axis & friends","title":"Axis & friends","text":"\\begin{axis} [...]\n    ...\n\\end{axis}","category":"page"},{"location":"man/axislike/","page":"Axis & friends","title":"Axis & friends","text":"Examples:","category":"page"},{"location":"man/axislike/","page":"Axis & friends","title":"Axis & friends","text":"julia> @pgf a = Axis({\n              xlabel = \"x\",\n              ylabel = \"y\",\n              title = \"Figure\"\n          },\n          PlotInc( Expression(\"x^2\")));\n\njulia> print_tex(a)\n\\begin{axis}[xlabel={x}, ylabel={y}, title={Figure}]\n    \\addplot+\n        {x^2};\n\\end{axis}\n\njulia> push!(a, PlotInc(Coordinates([1, 2], [3, 4])));\n\n\njulia> print_tex(a)\n\\begin{axis}[xlabel={x}, ylabel={y}, title={Figure}]\n    \\addplot+\n        {x^2};\n    \\addplot+\n        coordinates {\n            (1,3)\n            (2,4)\n        }\n        ;\n\\end{axis}","category":"page"},{"location":"man/axislike/","page":"Axis & friends","title":"Axis & friends","text":"Any struct can be pushed into an Axis. The LaTeX code that is generated is the result of PGFPlotsX.print_tex(io::IO, t::T, ::Axis), where T is the type of the struct. Pushed strings are written out verbatim.","category":"page"},{"location":"man/axislike/#GroupPlot","page":"Axis & friends","title":"GroupPlot","text":"","category":"section"},{"location":"man/axislike/","page":"Axis & friends","title":"Axis & friends","text":"A GroupPlot is a way of grouping multiple plots in one figure.","category":"page"},{"location":"man/axislike/","page":"Axis & friends","title":"Axis & friends","text":"GroupPlot","category":"page"},{"location":"man/axislike/#PGFPlotsX.GroupPlot","page":"Axis & friends","title":"PGFPlotsX.GroupPlot","text":"GroupPlot([options], contents...)\n\nA group plot, using the groupplots library of PGFPlots.\n\nThe contents after the global options are processed as follows:\n\nOptions (ie from @pgf {}) will emit a \\nextgroupplot with the given options,\nnothing is emitted as a \\nextgroupplot[group/empty plot],\nAxis, SemiLogXAxis, SemiLogYAxis and LogLogAxis are emitted as \\nextgroupplot[options...], followed by the contents,\nother values, eg Plot are emitted using print_tex.\n\n\n\n\n\n","category":"type"},{"location":"man/axislike/","page":"Axis & friends","title":"Axis & friends","text":"Example:","category":"page"},{"location":"man/axislike/","page":"Axis & friends","title":"Axis & friends","text":"julia> @pgf gp = GroupPlot({group_style = { group_size = \"2 by 1\",},\n                                            height = \"6cm\", width = \"6cm\"});\n\njulia> for (expr, data) in zip([\"x^2\", \"exp(x)\"], [\"data1.dat\", \"data2.dat\"])\n           push!(gp, Plot(Expression(expr)),  Plot(Table(data)))\n       end;\n\njulia> print_tex(gp)\n\\begin{groupplot}[group style={group size={2 by 1}}, height={6cm}, width={6cm}]\n    \\addplot\n        {x^2};\n    \\addplot\n        table {data1.dat};\n    \\addplot\n        {exp(x)};\n    \\addplot\n        table {data2.dat};\n\\end{groupplot}","category":"page"},{"location":"man/axislike/","page":"Axis & friends","title":"Axis & friends","text":"In order to add options to the \\nextgroupplot call, simply add arguments in an “option like way” (using @pgf) when you push!","category":"page"},{"location":"man/axislike/","page":"Axis & friends","title":"Axis & friends","text":"julia> @pgf gp = GroupPlot({group_style = { group_size = \"1 by 1\",}, height = \"6cm\", width = \"6cm\"});\n\njulia> @pgf for (expr, data) in zip([\"x^2\"], [\"data2.dat\"])\n           push!(gp, {title = \"Data $data\"}, Plot(Expression(expr)),  Plot(Table(data)))\n       end;\n\njulia> print_tex(gp)\n\\begin{groupplot}[group style={group size={1 by 1}}, height={6cm}, width={6cm}]\n    \\nextgroupplot[title={Data data2.dat}]\n    \\addplot\n        {x^2};\n    \\addplot\n        table {data2.dat};\n\\end{groupplot}","category":"page"},{"location":"man/axislike/#PolarAxis","page":"Axis & friends","title":"PolarAxis","text":"","category":"section"},{"location":"man/axislike/","page":"Axis & friends","title":"Axis & friends","text":"A PolarAxis plots data on a polar grid.","category":"page"},{"location":"man/axislike/","page":"Axis & friends","title":"Axis & friends","text":"Example:","category":"page"},{"location":"man/axislike/","page":"Axis & friends","title":"Axis & friends","text":"julia> p = PolarAxis( PlotInc( Coordinates([0, 90, 180, 270], [1, 1, 1, 1])));\n\njulia> print_tex(p)\n\\begin{polaraxis}\n    \\addplot+\n        coordinates {\n            (0,1)\n            (90,1)\n            (180,1)\n            (270,1)\n        }\n        ;\n\\end{polaraxis}","category":"page"},{"location":"man/axislike/#SmithChart","page":"Axis & friends","title":"SmithChart","text":"","category":"section"},{"location":"man/axislike/","page":"Axis & friends","title":"Axis & friends","text":"A SmithChart plots data on a Smith Chart axis.","category":"page"},{"location":"man/axislike/","page":"Axis & friends","title":"Axis & friends","text":"Smith Charts, used commonly in RF/Microwave engineering, map the complex half plane with positive real parts to the unit circle.","category":"page"},{"location":"man/axislike/","page":"Axis & friends","title":"Axis & friends","text":"The axis will visualize plots with 2D input coordinates z in mathbbC of the form z = x + jy in mathbbC with x ge 0 using the map","category":"page"},{"location":"man/axislike/","page":"Axis & friends","title":"Axis & friends","text":"rcolon 0infty times -inftyinfty to\n     a+j b vert  a^2 + b^2 = 1 \n    quad r(z) = fracz-1z+1","category":"page"},{"location":"man/axislike/","page":"Axis & friends","title":"Axis & friends","text":"Example:","category":"page"},{"location":"man/axislike/","page":"Axis & friends","title":"Axis & friends","text":"julia> p = SmithChart( Plot( Coordinates([(0.5,0.2),(1,0.8),(2,2)])));\n\njulia> print_tex(p)\n\\begin{smithchart}\n    \\addplot\n        coordinates {\n            (0.5,0.2)\n            (1,0.8)\n            (2,2)\n        }\n        ;\n\\end{smithchart}","category":"page"},{"location":"man/axislike/#Semilog-and-log-log-axes","page":"Axis & friends","title":"Semilog and log-log axes","text":"","category":"section"},{"location":"man/axislike/","page":"Axis & friends","title":"Axis & friends","text":"SemiLogXAxis\nSemiLogYAxis\nLogLogAxis\nTernaryAxis","category":"page"},{"location":"man/axislike/#PGFPlotsX.SemiLogXAxis","page":"Axis & friends","title":"PGFPlotsX.SemiLogXAxis","text":"SemiLogXAxis([options], elements...)\n\nLog x and linear y axes, corresponds to semilogxaxis in PGFPlots.\n\n\n\n\n\n","category":"type"},{"location":"man/axislike/#PGFPlotsX.SemiLogYAxis","page":"Axis & friends","title":"PGFPlotsX.SemiLogYAxis","text":"SemiLogYAxis([options], elements...)\n\nLinear x and log y axes, corresponds to semilogyaxis in PGFPlots.\n\n\n\n\n\n","category":"type"},{"location":"man/axislike/#PGFPlotsX.LogLogAxis","page":"Axis & friends","title":"PGFPlotsX.LogLogAxis","text":"LogLogAxis([options], elements...)\n\nLog-log axes, corresponds to loglogaxis in PGFPlots.\n\n\n\n\n\n","category":"type"},{"location":"man/axislike/#PGFPlotsX.TernaryAxis","page":"Axis & friends","title":"PGFPlotsX.TernaryAxis","text":"TernaryAxis([options], elements...)\n\nTernary axes, corresponds to ternaryaxis in PGFPlots.\n\n\n\n\n\n","category":"type"},{"location":"examples/latex/#latex-code","page":"Using LaTeX code","title":"Using LaTeX code","text":"","category":"section"},{"location":"examples/latex/","page":"Using LaTeX code","title":"Using LaTeX code","text":"PGFPlotsX has does not specify types for all LaTeX constructs. This is not a limitation, as you can just provide LaTeX code as strings, which are emitted directly. They can be freely mixed with other types, which are converted to LaTeX with print_tex. Since elements of AbstractVectors are printed in turn, this allows for a compact style.","category":"page"},{"location":"examples/latex/","page":"Using LaTeX code","title":"Using LaTeX code","text":"using PGFPlotsX\nsavefigs = (figname, obj) -> begin\n    pgfsave(figname * \".pdf\", obj)\n    run(`pdftocairo -svg -l 1 $(figname * \".pdf\") $(figname * \".svg\")`)\n    pgfsave(figname * \".tex\", obj);\n    return nothing\nend","category":"page"},{"location":"examples/latex/#Annotating-plots","page":"Using LaTeX code","title":"Annotating plots","text":"","category":"section"},{"location":"examples/latex/","page":"Using LaTeX code","title":"Using LaTeX code","text":"The example below demonstrates the use of \\node. Note the following:","category":"page"},{"location":"examples/latex/","page":"Using LaTeX code","title":"Using LaTeX code","text":"we use the raw string literal, which ensures that we don't need to escape the \\; \"\\\\node\" would work identically\nthe options (with {}, also containing a color) and coordinates we mix in just work as they should,\nwe provide separating whitespace, and the terminating ;.","category":"page"},{"location":"examples/latex/","page":"Using LaTeX code","title":"Using LaTeX code","text":"using Colors\nx = vcat(randn(10) ./ 4, 2.0)\ny = vcat(randn(10) ./ 4, 1.0)\n@pgf Axis(\n    {\n        only_marks,\n        xlabel = \"x\",\n        ylabel = \"y\"\n    },\n    Plot(Table(x, y)),\n    [raw\"\\node \",\n     {\n         draw = parse(Colorant, \"tomato3\"),\n         pin = \"180:outlier\"\n     },\n     \" at \",\n     Coordinate(x[end], y[end]),\n     \"{};\"])\nsavefigs(\"annotated-node\", ans) # hide","category":"page"},{"location":"examples/latex/","page":"Using LaTeX code","title":"Using LaTeX code","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/latex/","page":"Using LaTeX code","title":"Using LaTeX code","text":"(Image: )","category":"page"},{"location":"examples/latex/#latex-plot-elements","page":"Using LaTeX code","title":"LaTeX code for plot elements","text":"","category":"section"},{"location":"examples/latex/","page":"Using LaTeX code","title":"Using LaTeX code","text":"The example below demonstrates how strings can be included as “data” for Plot. Specifically, here we name two paths, then use fill between [of=f and g] to fill the space between them. This requires the use of the fillbetween library for PGFPlots, which we insert in the premable.","category":"page"},{"location":"examples/latex/","page":"Using LaTeX code","title":"Using LaTeX code","text":"push!(PGFPlotsX.CUSTOM_PREAMBLE, raw\"\\usepgfplotslibrary{fillbetween}\")\nx = range(-1, 1, length = 51)\n@pgf Axis({ xmajorgrids, ymajorgrids },\n          Plot({ \"name path=f\", no_marks, }, Coordinates(x, x)),\n          Plot({ \"name path=g\", no_marks, }, Coordinates(x, 1.2 .* x .+ 1)),\n          Plot({ thick, color = \"blue\", fill = \"blue\", opacity = 0.5 },\n               raw\"fill between [of=f and g]\"))\nsavefigs(\"fillbetween\", ans) # hide","category":"page"},{"location":"examples/latex/","page":"Using LaTeX code","title":"Using LaTeX code","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/latex/","page":"Using LaTeX code","title":"Using LaTeX code","text":"(Image: )","category":"page"},{"location":"examples/coordinates/#Coordinates","page":"Coordinates","title":"Coordinates","text":"","category":"section"},{"location":"examples/coordinates/","page":"Coordinates","title":"Coordinates","text":"using PGFPlotsX\nsavefigs = (figname, obj) -> begin\n    pgfsave(figname * \".pdf\", obj)\n    run(`pdftocairo -svg -l  1 $(figname * \".pdf\") $(figname * \".svg\")`)\n    pgfsave(figname * \".tex\", obj);\n    return nothing\nend","category":"page"},{"location":"examples/coordinates/","page":"Coordinates","title":"Coordinates","text":"Use Coordinates to construct the pgfplots construct coordinates. Various constructors are available.","category":"page"},{"location":"examples/coordinates/#Basic-usage","page":"Coordinates","title":"Basic usage","text":"","category":"section"},{"location":"examples/coordinates/","page":"Coordinates","title":"Coordinates","text":"For basic usage, consider AbstractVectors and iterables. Notice how non-finite values are skipped. You can also use () or nothing for jumps in functions.","category":"page"},{"location":"examples/coordinates/","page":"Coordinates","title":"Coordinates","text":"x = range(-1; stop = 1, length = 51) # so that it contains 1/0\n@pgf Axis(\n    {\n        xmajorgrids,\n        ymajorgrids,\n    },\n    Plot(\n        {\n            no_marks,\n        },\n        Coordinates(x, 1 ./ x)\n    )\n)\nsavefigs(\"coordinates-simple\", ans) # hide","category":"page"},{"location":"examples/coordinates/","page":"Coordinates","title":"Coordinates","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/coordinates/","page":"Coordinates","title":"Coordinates","text":"(Image: )","category":"page"},{"location":"examples/coordinates/#Error-bars","page":"Coordinates","title":"Error bars","text":"","category":"section"},{"location":"examples/coordinates/","page":"Coordinates","title":"Coordinates","text":"Use xerror, xerrorplus, xerrorminus, yerror etc. for error bars.","category":"page"},{"location":"examples/coordinates/","page":"Coordinates","title":"Coordinates","text":"x = range(0; stop = 2π, length = 20)\n@pgf Plot(\n    {\n        \"no marks\",\n        \"error bars/y dir=both\",\n        \"error bars/y explicit\",\n    },\n    Coordinates(x, sin.(x); yerror = 0.2*cos.(x))\n)\nsavefigs(\"coordinates-errorbars\", ans) # hide","category":"page"},{"location":"examples/coordinates/","page":"Coordinates","title":"Coordinates","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/coordinates/","page":"Coordinates","title":"Coordinates","text":"(Image: )","category":"page"},{"location":"examples/coordinates/#symbolic_coordinates_example","page":"Coordinates","title":"Symbolic coordinates","text":"","category":"section"},{"location":"examples/coordinates/","page":"Coordinates","title":"Coordinates","text":"@pgf Axis(\n    {\n        ybar,\n        enlargelimits = 0.15,\n        legend_style =\n        {\n            at = Coordinate(0.5, -0.15),\n            anchor = \"north\",\n            legend_columns = -1\n        },\n        ylabel = raw\"\\#participants\",\n        symbolic_x_coords=[\"tool8\", \"tool9\", \"tool10\"],\n        xtick = \"data\",\n        nodes_near_coords,\n        nodes_near_coords_align={vertical},\n    },\n    Plot(Coordinates([(\"tool8\", 7), (\"tool9\", 9), (\"tool10\", 4)])),\n    Plot(Coordinates([(\"tool8\", 4), (\"tool9\", 4), (\"tool10\", 4)])),\n    Plot(Coordinates([(\"tool8\", 1), (\"tool9\", 1), (\"tool10\", 1)])),\n    Legend([\"used\", \"understood\", \"not understood\"])\n)\nsavefigs(\"coordinates-symbolic\", ans) # hide","category":"page"},{"location":"examples/coordinates/","page":"Coordinates","title":"Coordinates","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/coordinates/","page":"Coordinates","title":"Coordinates","text":"(Image: )","category":"page"},{"location":"examples/coordinates/#D","page":"Coordinates","title":"3D","text":"","category":"section"},{"location":"examples/coordinates/","page":"Coordinates","title":"Coordinates","text":"Use three vectors to construct 3D coordinates.","category":"page"},{"location":"examples/coordinates/","page":"Coordinates","title":"Coordinates","text":"t = range(0; stop = 6*π, length = 100)\n@pgf Plot3(\n    {\n        no_marks,\n    },\n    Coordinates(t .* sin.(t), t .* cos.(t), .-t)\n)\nsavefigs(\"coordinates-3d\", ans) # hide","category":"page"},{"location":"examples/coordinates/","page":"Coordinates","title":"Coordinates","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/coordinates/","page":"Coordinates","title":"Coordinates","text":"(Image: )","category":"page"},{"location":"examples/coordinates/#Edge-vectors","page":"Coordinates","title":"Edge vectors","text":"","category":"section"},{"location":"examples/coordinates/","page":"Coordinates","title":"Coordinates","text":"A convenience constructor is available for plotting a matrix of values calculated from edge vectors.","category":"page"},{"location":"examples/coordinates/","page":"Coordinates","title":"Coordinates","text":"x = range(-2; stop = 2, length = 20)\ny = range(-0.5; stop = 3, length = 25)\nf(x, y) = (1 - x)^2 + 100*(y - x^2)^2\n@pgf Plot3(\n    {\n        surf,\n    },\n    Coordinates(x, y, f.(x, y'))\n)\nsavefigs(\"coordinates-3d-matrix\", ans) # hide","category":"page"},{"location":"examples/coordinates/","page":"Coordinates","title":"Coordinates","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/coordinates/","page":"Coordinates","title":"Coordinates","text":"(Image: )","category":"page"},{"location":"examples/coordinates/#Heatmap","page":"Coordinates","title":"Heatmap","text":"","category":"section"},{"location":"examples/coordinates/","page":"Coordinates","title":"Coordinates","text":"x = range(-2; stop = 2, length = 40)\ny = range(-0.5; stop = 3, length = 50)\n@pgf Axis(\n    {\n        view = (0, 90),\n        colorbar,\n        \"colormap/jet\",\n    },\n    Plot3(\n        {\n            surf,\n            shader = \"flat\",\n        },\n        Coordinates(x, y, @. √(f(x, y')))\n    )\n)\nsavefigs(\"coordinates-3d-matrix-heatmap\", ans) # hide","category":"page"},{"location":"examples/coordinates/","page":"Coordinates","title":"Coordinates","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/coordinates/","page":"Coordinates","title":"Coordinates","text":"(Image: )","category":"page"},{"location":"examples/coordinates/#Matrix-plot","page":"Coordinates","title":"Matrix plot","text":"","category":"section"},{"location":"examples/coordinates/","page":"Coordinates","title":"Coordinates","text":"x = repeat(0:2, outer = 3)\ny = repeat(0:2, inner = 3)\nmeta = [\"color=$c\" for c in [\"red\", \"blue\", \"yellow\", \"black\", \"brown\", \"magenta\", \"green\", \"red\", \"white\"]]\nc = Coordinates(x, y; meta = meta)\n@pgf Axis(\n    {\n        enlargelimits = false,\n        xtick = [0, 1, 2]\n    },\n    PlotInc(\n        {\n            matrix_plot,\n            mark = \"*\",\n            nodes_near_coords = raw\"\\coordindex\",\n            \"mesh/color input\" = \"explicit\",\n            \"mesh/cols\" = 3\n        },\n        c,\n    )\n)\nsavefigs(\"matrix-plot\", ans) # hide","category":"page"},{"location":"examples/coordinates/","page":"Coordinates","title":"Coordinates","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/coordinates/","page":"Coordinates","title":"Coordinates","text":"(Image: )","category":"page"},{"location":"man/picdoc/#TikzPicture","page":"TikzPicture","title":"TikzPicture","text":"","category":"section"},{"location":"man/picdoc/","page":"TikzPicture","title":"TikzPicture","text":"DocTestSetup = quote\n    using PGFPlotsX\nend","category":"page"},{"location":"man/picdoc/","page":"TikzPicture","title":"TikzPicture","text":"A TikzPicture can contain multiple Axis-like objects.","category":"page"},{"location":"man/picdoc/","page":"TikzPicture","title":"TikzPicture","text":"TikzPicture","category":"page"},{"location":"man/picdoc/#PGFPlotsX.TikzPicture","page":"TikzPicture","title":"PGFPlotsX.TikzPicture","text":"TikzPicture([options], contents...)\n\nCorresponds to a tikzpicture block in PGFPlots.\n\nElements can also be added with push! after construction.\n\n\n\n\n\n","category":"type"},{"location":"man/picdoc/","page":"TikzPicture","title":"TikzPicture","text":"Example:","category":"page"},{"location":"man/picdoc/","page":"TikzPicture","title":"TikzPicture","text":"julia> tp = @pgf TikzPicture({ \"scale\" => 1.5 }, Axis(Plot(Coordinates([1, 2], [2, 4]))));\n\njulia> print_tex(tp)\n\\begin{tikzpicture}[scale={1.5}]\n\\begin{axis}\n    \\addplot\n        coordinates {\n            (1,2)\n            (2,4)\n        }\n        ;\n\\end{axis}\n\\end{tikzpicture}","category":"page"},{"location":"man/picdoc/#TikzDocument","page":"TikzPicture","title":"TikzDocument","text":"","category":"section"},{"location":"man/picdoc/","page":"TikzPicture","title":"TikzPicture","text":"A TikzDocument is the highest level object and represents a whole tex file. It includes a list of objects between \\begin{document} and \\end{document}.","category":"page"},{"location":"man/picdoc/","page":"TikzPicture","title":"TikzPicture","text":"TikzDocument","category":"page"},{"location":"man/picdoc/#PGFPlotsX.TikzDocument","page":"TikzPicture","title":"PGFPlotsX.TikzDocument","text":"TikzDocument(elements...; use_default_preamble = true, preamble = [])\n\nCorresponds to a LaTeX document, usually wrapping TikzPictures.\n\nuse_default_preamble determines whether a preamble is added from the global variables (see CUSTOM_PREAMBLE and CUSTOM_PREAMBLE_PATH).\n\npreamble is appended after the default one (if any).\n\npush! can be used to append elements after construction, and similarly push_preamble! for the preamble.\n\n\n\n\n\n","category":"type"},{"location":"man/picdoc/","page":"TikzPicture","title":"TikzPicture","text":"A very simple example where we simply create a TikzDocument with a string is shown below. Normally you would also push Axis-like objects that contain plots.","category":"page"},{"location":"man/picdoc/","page":"TikzPicture","title":"TikzPicture","text":"julia> td = TikzDocument();\n\njulia> push!(td, \"Hello World\");\n\njulia> print_tex(td)\n\\RequirePackage{luatex85}\n\\documentclass[tikz]{standalone}\n% Default preamble\n\\usepackage{pgfplots}\n\\pgfplotsset{compat=newest}\n\\usepgfplotslibrary{groupplots}\n\\usepgfplotslibrary{polar}\n\\usepgfplotslibrary{statistics}\n\\begin{document}\nHello World\n\\end{document}","category":"page"},{"location":"man/picdoc/","page":"TikzPicture","title":"TikzPicture","text":"A TikzDocument uses global variables to construct a preamble, and allows the user to add extra lines to this (eg in case you want to add \\usepackage lines), or disable it altogether.","category":"page"},{"location":"man/picdoc/","page":"TikzPicture","title":"TikzPicture","text":"note: Note\nThere is usually no need to explicitly create a TikzDocument or TikzPicture. Only do this if you want to give special options to them. It is possible to show or save an Axis or e.g. a Plot directly, and they will then be wrapped in the default \"higher level\" objects.","category":"page"},{"location":"man/structs/#Overview","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"man/structs/","page":"Overview","title":"Overview","text":"DocTestSetup = quote\n    using PGFPlotsX\nend","category":"page"},{"location":"man/structs/","page":"Overview","title":"Overview","text":"This package is a collection of functions and types which make it convenient to generate LaTeX output, which can in turn be compiled by PGFPlots to produce vector or bitmap images like pdf, svg or png, or used directly in LaTeX documents.","category":"page"},{"location":"man/structs/","page":"Overview","title":"Overview","text":"PGFPlots has a very detailed manual (a local copy should be available in TeXLive and MikTeX installations) which should be your primary source of documentation, and its contents are not repeated here. It is assumed that you read the relevant parts of this manual, and look for solutions there first.","category":"page"},{"location":"man/structs/","page":"Overview","title":"Overview","text":"Instead, this manual describes a way to conveniently generate what LaTeX output from Julia, using the types introduced in this package, other packages, and Julia's built-in constructs. When working with this package, it is frequently convenient to examine the LaTeX representation of objects. print_tex is a method that prints LaTeX code that is written out when saving plots; we use it extensively in this manual for demonstrations, while in practice one would use it for debugging.","category":"page"},{"location":"man/structs/","page":"Overview","title":"Overview","text":"As an example, consider the following trivial plot:","category":"page"},{"location":"man/structs/","page":"Overview","title":"Overview","text":"\\begin{tikzpicture}\n\\begin{axis}\n    \\addplot+[only marks] table {\n            x  y\n            1  3\n            2  4\n        };\n    \\addplot+ table {\n            x  y\n            5  1\n            6  2\n        };\n\\end{axis}\n\\end{tikzpicture}","category":"page"},{"location":"man/structs/","page":"Overview","title":"Overview","text":"which can be produced by this package with the code","category":"page"},{"location":"man/structs/","page":"Overview","title":"Overview","text":"@pgf TikzPicture(\n        Axis(\n            PlotInc({ only_marks },\n                Table(; x = 1:2, y = 3:4)),\n            PlotInc(\n                Table(; x = 5:6, y = 1:2))))","category":"page"},{"location":"man/structs/","page":"Overview","title":"Overview","text":"(The unconventional use of linebreaks in the Julia code is to emphasize the structural similarities between the two pieces of code).","category":"page"},{"location":"man/structs/","page":"Overview","title":"Overview","text":"The plot is built up from two Tables, which are tabular representations of data with (usually) named columns. These provide data for Plots, here using the PlotInc constructor which corresponds to the \\addplot+ command: the + tells PGFPlots to use a default style that varies with each plot. Each plot can have a single source of data.","category":"page"},{"location":"man/structs/","page":"Overview","title":"Overview","text":"Plots are grouped together into an Axis, which corresponds to what most other libraries would call a “plot” (we use the term flexibly, too). Besides grouping plots, Axis allows the customization of ticks, labels, axis styles, legends, and related objects.","category":"page"},{"location":"man/structs/","page":"Overview","title":"Overview","text":"TikzPicture wraps the Axis. If you omit this, this package will do it for you automatically. Similarly, if you have a single Plot-like object and don't want to customize the Axis, it will also be added automatically.","category":"page"},{"location":"man/structs/","page":"Overview","title":"Overview","text":"Finally, @pgf is a convenient syntax for specifying options. It is is a macro that traverses its argument recursively, and converts it to a PGFPlotsX.Options object. It is recommended that you use this macro. The convention of this library is to apply @pgf to whole expressions to avoid repetition, but this is not required.","category":"page"},{"location":"man/structs/","page":"Overview","title":"Overview","text":"PGFPlotsX allows building up plots from types that correspond very closely to PGFPlots counterparts. The table below gives an overview of the types defined by this package. For most PGFPlots constructs, [] can be used to specify options, this corresponds to the [options] argument in the table above.","category":"page"},{"location":"man/structs/","page":"Overview","title":"Overview","text":"PGFPlots ([] indicates options) PGFPlotsX remark\ntable[] { ... } Table([options], ...) preferred to Coordinates\ncoordinates { ... } Coordinates(...) useful error bars\n\\addplot[] { ... } & friends Plot([options], ...) & friends also PlotInc, Plot3, Plot3Inc\n\\legend, \\legendentry[] Legend, Legendentry([options]) \n{expression} Expression(...) math formulas\ngraphics[] { ... } Graphics([options], ...) bitmaps\n\\axis[] { ... } & friends Axis([options], ...) & friends can have multiple Plots & similar\n\\begin{tikzpicture} ... TikzPicture([options], ...) rarely used directly\n\\begin{document} ... TikzDocument(...; ...) rarely used directly","category":"page"},{"location":"man/structs/","page":"Overview","title":"Overview","text":"The following sections document these.","category":"page"},{"location":"man/axiselements/#axis_elements","page":"Axis elements","title":"Axis elements","text":"","category":"section"},{"location":"man/axiselements/","page":"Axis elements","title":"Axis elements","text":"DocTestSetup = quote\n    using PGFPlotsX\nend","category":"page"},{"location":"man/axiselements/","page":"Axis elements","title":"Axis elements","text":"The following types are accepted as elements of Axis & friends:","category":"page"},{"location":"man/axiselements/","page":"Axis elements","title":"Axis elements","text":"plot variants: Plot, PlotInc, Plot3, Plot3Inc,\nlegend specifications: Legend, LegendEntry,\nstrings, which are inserted verbatim.","category":"page"},{"location":"man/axiselements/","page":"Axis elements","title":"Axis elements","text":"This section documents these.","category":"page"},{"location":"man/axiselements/#plotlike","page":"Axis elements","title":"Plots","text":"","category":"section"},{"location":"man/axiselements/","page":"Axis elements","title":"Axis elements","text":"A plot is an element inside an axis. It can be a wide range of constructs, from a simple line to a 3D surface. A plot is created by wrapping one of the data structures.","category":"page"},{"location":"man/axiselements/","page":"Axis elements","title":"Axis elements","text":"note: Note\nPGFPlots uses \\addplot & friends for visualization that uses a single data source, in most cases drawn using the same style. If you want to plot multiple sources of data that share axes, eg two time series, your axis will have multiple “plots” in the terminology of PGFPlots.","category":"page"},{"location":"man/axiselements/#Plot-and-PlotInc","page":"Axis elements","title":"Plot and PlotInc","text":"","category":"section"},{"location":"man/axiselements/","page":"Axis elements","title":"Axis elements","text":"For \\addplot and \\addplot+, respectively.","category":"page"},{"location":"man/axiselements/","page":"Axis elements","title":"Axis elements","text":"Plot\nPlotInc","category":"page"},{"location":"man/axiselements/#PGFPlotsX.Plot","page":"Axis elements","title":"PGFPlotsX.Plot","text":"struct Plot <: PGFPlotsX.OptionType\n\nCorresponds to the \\addplot[3][+] family of pgfplot commands.\n\nInstead of the default constructor, use Plot([options], data, trailing...) and similar (PlotInc, Plot3, Plot3Inc) in user code.\n\n\n\n\n\n","category":"type"},{"location":"man/axiselements/#PGFPlotsX.PlotInc","page":"Axis elements","title":"PGFPlotsX.PlotInc","text":"PlotInc([options::Options], data, trailing...)\n\nCorresponds to the \\addplot+ form in PGFPlots.\n\nFor the interpretation of the other arguments, see Plot(::Options, ::PlotData, ...).\n\n\n\n\n\n","category":"function"},{"location":"man/axiselements/","page":"Axis elements","title":"Axis elements","text":"Example:","category":"page"},{"location":"man/axiselements/","page":"Axis elements","title":"Axis elements","text":"julia> p = @pgf PlotInc({ blue }, Table(\"plotdata/invcum.dat\"));\n\njulia> print_tex(p)\n\\addplot+[blue]\n    table {plotdata/invcum.dat};","category":"page"},{"location":"man/axiselements/#Plot3","page":"Axis elements","title":"Plot3","text":"","category":"section"},{"location":"man/axiselements/","page":"Axis elements","title":"Axis elements","text":"Plot3 will use the \\addplot3 command instead of \\addplot to draw 3D graphics. Otherwise it works the same as Plot. The incremental variant is Plot3Inc.","category":"page"},{"location":"man/axiselements/","page":"Axis elements","title":"Axis elements","text":"Plot3\nPlot3Inc","category":"page"},{"location":"man/axiselements/#PGFPlotsX.Plot3","page":"Axis elements","title":"PGFPlotsX.Plot3","text":"Plot3([options::Options], data, trailing...)\n\nCorresponds to the \\addplot3 form in PGFPlots.\n\nFor the interpretation of the other arguments, see Plot(::Options, ::PlotData, ...).\n\n\n\n\n\n","category":"function"},{"location":"man/axiselements/#PGFPlotsX.Plot3Inc","page":"Axis elements","title":"PGFPlotsX.Plot3Inc","text":"Plot3Inc([options::Options], data, trailing...)\n\nCorresponds to the \\addplot3+ form in PGFPlots.\n\nFor the interpretation of the other arguments, see Plot(::Options, ::PlotData, ...).\n\n\n\n\n\n","category":"function"},{"location":"man/axiselements/","page":"Axis elements","title":"Axis elements","text":"Example:","category":"page"},{"location":"man/axiselements/","page":"Axis elements","title":"Axis elements","text":"julia> x, y, z = [1, 2, 3], [2, 4, 8], [3, 9, 27];\n\njulia> p = @pgf Plot3({ very_thick }, Coordinates(x, y, z));\n\njulia> print_tex(p)\n\\addplot3[very thick]\n    coordinates {\n        (1,2,3)\n        (2,4,9)\n        (3,8,27)\n    }\n    ;","category":"page"},{"location":"man/axiselements/#Legends","page":"Axis elements","title":"Legends","text":"","category":"section"},{"location":"man/axiselements/","page":"Axis elements","title":"Axis elements","text":"Legend\nLegendEntry","category":"page"},{"location":"man/axiselements/#PGFPlotsX.Legend","page":"Axis elements","title":"PGFPlotsX.Legend","text":"Legend(labels)\n\n\nCorresponds to \\legend{ ... } in PGFPlots. Specifies multiple legends for an axis, its position is irrelevant.\n\nlabels are wrapped in {}s, so they can contain ,.\n\n\n\n\n\n","category":"type"},{"location":"man/axiselements/#PGFPlotsX.LegendEntry","page":"Axis elements","title":"PGFPlotsX.LegendEntry","text":"LegendEntry([options::Options], name, [isexpanded])\n\nCorresponds to the \\addlegendentry and \\addlegendentryexpanded forms of PGFPlots.\n\n\n\n\n\n","category":"type"},{"location":"man/axiselements/","page":"Axis elements","title":"Axis elements","text":"A Legend can be used to add legends to an axis, for multiple plots at the same time. In contrast, LegendEntry applies to the preceding plot.","category":"page"},{"location":"man/axiselements/","page":"Axis elements","title":"Axis elements","text":"Example:","category":"page"},{"location":"man/axiselements/","page":"Axis elements","title":"Axis elements","text":"julia> print_tex(Legend([\"Plot A\", \"Plot B\"]))\n\\legend{{Plot A},{Plot B}}","category":"page"},{"location":"man/axiselements/#Horizontal-and-vertical-lines","page":"Axis elements","title":"Horizontal and vertical lines","text":"","category":"section"},{"location":"man/axiselements/","page":"Axis elements","title":"Axis elements","text":"HLine and VLine have no equivalent constructs in pgfplots, they are provided for convenient drawing of horizontal and vertical lines. When options are used, they are passed to the TikZ function \\draw[...].","category":"page"},{"location":"man/axiselements/","page":"Axis elements","title":"Axis elements","text":"HLine\nVLine","category":"page"},{"location":"man/axiselements/#PGFPlotsX.HLine","page":"Axis elements","title":"PGFPlotsX.HLine","text":"HLine([options], y)\n\nA horizontal line at y.\n\n\n\n\n\n","category":"type"},{"location":"man/axiselements/#PGFPlotsX.VLine","page":"Axis elements","title":"PGFPlotsX.VLine","text":"VLine([options], x)\n\nA vertical line at x.\n\n\n\n\n\n","category":"type"},{"location":"man/axiselements/#Horizontal-and-vertical-bands","page":"Axis elements","title":"Horizontal and vertical bands","text":"","category":"section"},{"location":"man/axiselements/","page":"Axis elements","title":"Axis elements","text":"HBand and VBand have no equivalent constructs in pgfplots, they are provided for convenient drawing of horizontal and vertical bands. These bands are simply rectangles that span across an axis. When options are used, they are passed to the TikZ function \\draw[...].","category":"page"},{"location":"man/axiselements/","page":"Axis elements","title":"Axis elements","text":"HBand\nVBand","category":"page"},{"location":"man/axiselements/#PGFPlotsX.HBand","page":"Axis elements","title":"PGFPlotsX.HBand","text":"HBand([options], ymin, ymax)\n\nA horizontal band from ymin to ymax.\n\n\n\n\n\n","category":"type"},{"location":"man/axiselements/#PGFPlotsX.VBand","page":"Axis elements","title":"PGFPlotsX.VBand","text":"VBand([options], xmin, xmax)\n\nA vertical band from xmin to xmax.\n\n\n\n\n\n","category":"type"},{"location":"man/axiselements/#latex_code_strings","page":"Axis elements","title":"Using LaTeX code directly","text":"","category":"section"},{"location":"man/axiselements/","page":"Axis elements","title":"Axis elements","text":"In case there is no type defined in this package for some construct, you can use a String in an axis, and it is inserted verbatim into the generated LaTeX code. Raw string literals and the package LaTeXStrings are useful to avoid a lot of escaping.","category":"page"},{"location":"man/axiselements/","page":"Axis elements","title":"Axis elements","text":"The gallery has some detailed examples, eg for annotating plots.","category":"page"},{"location":"man/save/#Showing-/-Exporting-figures","page":"Showing / Exporting figures","title":"Showing / Exporting figures","text":"","category":"section"},{"location":"man/save/#Jupyter","page":"Showing / Exporting figures","title":"Jupyter","text":"","category":"section"},{"location":"man/save/","page":"Showing / Exporting figures","title":"Showing / Exporting figures","text":"Figures are shown in svg format when evaluated in Jupyter. For this you need the pdf2svg software installed. If you want to show figures in png format (because perhaps the svg format is too large), you can use display(\"image/png\", p) where p is the figure to show.","category":"page"},{"location":"man/save/#REPL","page":"Showing / Exporting figures","title":"REPL","text":"","category":"section"},{"location":"man/save/","page":"Showing / Exporting figures","title":"Showing / Exporting figures","text":"In the REPL, the figure will be exported to a pdf and attempted to be opened in the default pdf viewing program. If you wish to disable this, run PGFPlotsX.enable_interactive(false).","category":"page"},{"location":"man/save/#Exporting-to-files","page":"Showing / Exporting figures","title":"Exporting to files","text":"","category":"section"},{"location":"man/save/","page":"Showing / Exporting figures","title":"Showing / Exporting figures","text":"Figures can be exported to files using","category":"page"},{"location":"man/save/","page":"Showing / Exporting figures","title":"Showing / Exporting figures","text":"pgfsave(filename::AbstractString, figure; include_preamble::Bool = true, dpi = 150)","category":"page"},{"location":"man/save/","page":"Showing / Exporting figures","title":"Showing / Exporting figures","text":"where the file extension of filename determines the file type (can be pdf, svg or tex, or the standalone tikz file extensions below), include_preamble sets if the preamble should be included in the output (only relevant for tex export) and dpi determines the dpi of the figure (only relevant for png export).","category":"page"},{"location":"man/save/","page":"Showing / Exporting figures","title":"Showing / Exporting figures","text":"pgfsave","category":"page"},{"location":"man/save/#PGFPlotsX.pgfsave","page":"Showing / Exporting figures","title":"PGFPlotsX.pgfsave","text":"save(\n    filename,\n    td;\n    include_preamble,\n    latex_engine,\n    buildflags,\n    dpi,\n    showing_ide\n)\n\n\nSave the argument (either TikzDocument, or some other type which is wrapped in one automatically, eg TikzPicture, Axis, or Plot) to filename, guessing the format from the file extension. Keywords specify options, some specific to some output formats.\n\npgfsave is an alias which is exported.\n\n\n\n\n\n","category":"function"},{"location":"man/save/","page":"Showing / Exporting figures","title":"Showing / Exporting figures","text":"The standalone file extensions tikz, TIKZ, TikZ, pgf, PGF save LaTeX code for a tikzpicture environment without a preamble. You can \\input them directly into a LaTeX document, or use the the tikzscale LaTeX package for using \\includegraphics with possible size adjustments.","category":"page"},{"location":"man/save/","page":"Showing / Exporting figures","title":"Showing / Exporting figures","text":"hint: Hint\nYou can use the externalization feature of tikz/pgfplots, which caches generated pdf files for faster compilation of LaTeX documents. Use\\usepgfplotslibrary{external}\n\\tikzexternalizein the preamble of the LaTeX document which uses these plots, see the manuals for more details.","category":"page"},{"location":"man/save/#customizing_the_preamble","page":"Showing / Exporting figures","title":"Customizing the preamble","text":"","category":"section"},{"location":"man/save/","page":"Showing / Exporting figures","title":"Showing / Exporting figures","text":"It is common to use a custom preamble to add user-defined macros or use different packages. There are a few ways to do this:","category":"page"},{"location":"man/save/","page":"Showing / Exporting figures","title":"Showing / Exporting figures","text":"push! strings into the global variable PGFPlotsX.CUSTOM_PREAMBLE. Each string in that vector will be inserted in the preamble.\nModify the custom_preamble.tex file in the deps folder of the directory of the package. This file is directly spliced into the preamble of the output.\nDefine the environment variable PGFPLOTSX_PREAMBLE_PATH to a path pointing to a preamble file. The content of that will be inserted into the preamble.","category":"page"},{"location":"man/save/","page":"Showing / Exporting figures","title":"Showing / Exporting figures","text":"PGFPlotsX.CUSTOM_PREAMBLE","category":"page"},{"location":"man/save/#PGFPlotsX.CUSTOM_PREAMBLE","page":"Showing / Exporting figures","title":"PGFPlotsX.CUSTOM_PREAMBLE","text":"A vector of stings, added after DEFAULT_PREAMBLE.\n\nUse this for additional definitions \\usepackage statements required by the LaTeX code you include into plots.\n\n\n\n\n\n","category":"constant"},{"location":"man/save/","page":"Showing / Exporting figures","title":"Showing / Exporting figures","text":"Access to the class options of the standalone document class is possible with PGFPlotsX.CLASS_OPTIONS.","category":"page"},{"location":"man/save/","page":"Showing / Exporting figures","title":"Showing / Exporting figures","text":"PGFPlotsX.CLASS_OPTIONS","category":"page"},{"location":"man/save/#PGFPlotsX.CLASS_OPTIONS","page":"Showing / Exporting figures","title":"PGFPlotsX.CLASS_OPTIONS","text":"List of class options used in the preamble (default [\"tikz\"]).\n\nBy setting PGFPlotsX.CLASS_OPTIONS[1] = \"varwidth\"; push!(PGFPlotsX.CLASS_OPTIONS, \"crop=false\") the preamble will contain documentclass[varwidth,crop=false]{standalone}.\n\nSee https://www.ctan.org/pkg/standalone for a list of options.\n\n\n\n\n\n","category":"constant"},{"location":"man/save/#Choosing-the-LaTeX-engine-used","page":"Showing / Exporting figures","title":"Choosing the LaTeX engine used","text":"","category":"section"},{"location":"man/save/","page":"Showing / Exporting figures","title":"Showing / Exporting figures","text":"Thee are three different choices for latex engines, PDFLATEX, LUALATEX and XELATEX. By default, LUALATEX is used if it was available during Pkg.build(). The active engine can be retrieved with the latexengine() function and be set with latexengine!(engine) where engine is one of the three previously mentioned engines (i.e. PGFPlotsX.PDFLATEX or PGFPlotsX.XELATEX).","category":"page"},{"location":"man/save/#File-conversions","page":"Showing / Exporting figures","title":"File conversions","text":"","category":"section"},{"location":"man/save/","page":"Showing / Exporting figures","title":"Showing / Exporting figures","text":"When saving a file in PNG or SVG formats, it is first saved as a PDF and then converted using external programs. When the user needs more than one version, this can be done more efficiently by converting the PDF manually, as in","category":"page"},{"location":"man/save/","page":"Showing / Exporting figures","title":"Showing / Exporting figures","text":"pdf_path = \"/tmp/filename.pdf\"\npgfsave(pdf_path, my_figure)\nPGFPlotsX.convert_pdf_to_png(pdf_path) # /tmp/filename.png\nPGFPlotsX.convert_pdf_to_svg(pdf_path) # /tmp/filename.svg","category":"page"},{"location":"man/save/","page":"Showing / Exporting figures","title":"Showing / Exporting figures","text":"The following are utility functions available for this purpose, but not exported.","category":"page"},{"location":"man/save/","page":"Showing / Exporting figures","title":"Showing / Exporting figures","text":"PGFPlotsX.convert_pdf_to_png\nPGFPlotsX.convert_pdf_to_svg","category":"page"},{"location":"man/save/#PGFPlotsX.convert_pdf_to_png","page":"Showing / Exporting figures","title":"PGFPlotsX.convert_pdf_to_png","text":"convert_pdf_to_png(pdf)\nconvert_pdf_to_png(pdf, png; engine, dpi)\n\n\nConvert a PDF file to PNG. The filename for the result can be omitted, in which case it will be generated by replacing the extension (if any).\n\nRelies on external programs, see the manual.\n\nPart of the API, but not exported.\n\n\n\n\n\n","category":"function"},{"location":"man/save/#PGFPlotsX.convert_pdf_to_svg","page":"Showing / Exporting figures","title":"PGFPlotsX.convert_pdf_to_svg","text":"convert_pdf_to_svg(pdf)\nconvert_pdf_to_svg(pdf, svg; engine)\n\n\nConvert a PDF file to SVG. The filename for the result can be omitted, in which case it will be generated by replacing the extension (if any).\n\nRelies on external programs, see the manual.\n\nPart of the API, but not exported.\n\n\n\n\n\n","category":"function"},{"location":"man/save/#Custom-flags","page":"Showing / Exporting figures","title":"Custom flags","text":"","category":"section"},{"location":"man/save/","page":"Showing / Exporting figures","title":"Showing / Exporting figures","text":"PGFPlotsX.CUSTOM_FLAGS","category":"page"},{"location":"man/save/#PGFPlotsX.CUSTOM_FLAGS","page":"Showing / Exporting figures","title":"PGFPlotsX.CUSTOM_FLAGS","text":"Custom flags to the engine can be used in the latex command by push!-ing them into the global variable CUSTOM_FLAGS.\n\n\n\n\n\n","category":"constant"},{"location":"man/data/#Data","page":"Data","title":"Data","text":"","category":"section"},{"location":"man/data/","page":"Data","title":"Data","text":"DocTestSetup = quote\n    using PGFPlotsX\nend","category":"page"},{"location":"man/data/","page":"Data","title":"Data","text":"There are multiple ways of representing data in PGFPlots.","category":"page"},{"location":"man/data/#table_header","page":"Data","title":"Table and TableData","text":"","category":"section"},{"location":"man/data/","page":"Data","title":"Data","text":"A Table represents a matrix of data where each column is labeled. It can simply point to an external data file or store the data inline in the tex file. Tables can have options.","category":"page"},{"location":"man/data/","page":"Data","title":"Data","text":"TableData is the representation of just the data, without the table[options] part. It is useful for inline tables in specials cases. Also, calls to Table use TableData to convert the arguments, so if you want to learn about all the ways to construct a Table, see the methods of TableData.","category":"page"},{"location":"man/data/","page":"Data","title":"Data","text":"Table\nTableData","category":"page"},{"location":"man/data/#PGFPlotsX.Table","page":"Data","title":"PGFPlotsX.Table","text":"Table([options], ...; ...)\n\nTabular data with options, corresponding to table[options] { ... } in PGFPlots.\n\noptions stores the options. If that is followed by an AbstractString, that will be used as a filename to read data from, otherwise all the arguments are passed on to TableData.\n\nExamples:\n\nTable([\"x\" => 1:10, \"y\" => 11:20])        # from a vector\n\nTable([1:10, 11:20])                      # same contents, unnamed\n\nTable(Dict(:x => 1:10, :y = 11:20))       # a Dict with symbols\n\n@pgf Table({ \"x index\" = 2, \"y index\" = 1 }, randn(10, 3))\n\nlet x = range(0; stop = 1, length = 10), y = range(-2; stop =  3, length = 15)\n    Table(x, y, sin.(x + y'))             # edges & matrix\nend\n\n\n\n\n\n","category":"type"},{"location":"man/data/#PGFPlotsX.TableData","page":"Data","title":"PGFPlotsX.TableData","text":"Tabular data with optional column names.\n\nThis corresponds to the part of tables between {}'s in PGFPlots, without the options or table, so that it can also be used for “inline” tables. Table will call the constructor for this type to convert arguments after options.\n\ndata is a matrix, which contains the contents of the table, which will be printed using print_tex. colnames is a vector of column names (converted to string), or nothing for a table with no column names.\n\nWhen rowsep is true, an additional \\\\ is used as a row separator. The default is true, this is recommended to avoid “fragility” issues with inline tables.\n\nnote: Note\nTable queries TableData for its rowsep, and adds the relevant option accordingly. When using “inline” tables, eg in options, you have to specify this manually for the container. See the gallery for examples.\n\nAfter each index in scanlines, extra row separators are inserted. This can be used for skipping coordinates or implicitly defining the dimensions of a matrix for surf and mesh plots. They are expanded using expand_scanlines.\n\n\n\n\n\n","category":"type"},{"location":"man/data/","page":"Data","title":"Data","text":"Examples:","category":"page"},{"location":"man/data/","page":"Data","title":"Data","text":"julia> t = @pgf Table({x = \"Dof\"}, \"data.dat\");\n\njulia> print_tex(t)\ntable [x={Dof}] {\n    <ABSPATH>/data.dat\n}","category":"page"},{"location":"man/data/","page":"Data","title":"Data","text":"Inline data is constructed using a keyword constructor:","category":"page"},{"location":"man/data/","page":"Data","title":"Data","text":"julia> t = @pgf Table({x => \"Dof\", y => \"Err\"},\n                      [:Dof => [1, 2, 4], :Err => [2.0, 1.0, 0.1]]);\n\njulia> print_tex(t)\ntable[row sep={\\\\}, x={Dof}, y={Err}]\n{\n    Dof  Err  \\\\\n    1.0  2.0  \\\\\n    2.0  1.0  \\\\\n    4.0  0.1  \\\\\n}","category":"page"},{"location":"man/data/","page":"Data","title":"Data","text":"You can give a type that supports the Tables.jl as the second argument to Table and the data and column names will be inferred. For example, if you load the DataFrames package, you can create tables from data frames, see the examples in Julia types.","category":"page"},{"location":"man/data/","page":"Data","title":"Data","text":"note: Note\nBy default, PGFPlots expects rows to be separated in a table with a newline. This can be “fragile” in LaTeX, in the sense that linebreaks may be merged with other whitespace within certain constructs, eg macros. In order to prevent this, this package uses the option rowsep=\\\\ by default. This is taken care of automatically, except for inline tables where you have to specify it manually. See the patch plot in the gallery.","category":"page"},{"location":"man/data/#coordinates_header","page":"Data","title":"Using coordinates","text":"","category":"section"},{"location":"man/data/","page":"Data","title":"Data","text":"Coordinates are a list of points (x,y) or (x,y,z). PGFPlotsX wraps these in the Coordinate type, but for multiple coordinates, it is recommended that you use the Coordinates constructor, which has convenience features like converting non-finite numbers to skipped points (represented by nothing).","category":"page"},{"location":"man/data/","page":"Data","title":"Data","text":"Strings are also accepted in place of numbers, and can be used for symbolic coordinates (eg for categorical data). See this example.","category":"page"},{"location":"man/data/#Coordinates","page":"Data","title":"Coordinates","text":"","category":"section"},{"location":"man/data/","page":"Data","title":"Data","text":"Coordinates(x, y, [z]) where x and y (and optionally z) are lists.\nCoordinates(points) where points is a list of tuples, Coordinates, or nothing, e.g. x = [(1.0, 2.0), (2.0, 4.0)].","category":"page"},{"location":"man/data/","page":"Data","title":"Data","text":"Errors can be added to Coordinates with keywords.","category":"page"},{"location":"man/data/","page":"Data","title":"Data","text":"Coordinates","category":"page"},{"location":"man/data/#PGFPlotsX.Coordinates","page":"Data","title":"PGFPlotsX.Coordinates","text":"Coordinates(itr)\n\n\nConvert the argument, which can be any iterable object, to coordinates.\n\nSpecifically,\n\nCoordinate and Nothing are passed through as is,\n2- or 3-element tuples of finite real numbers or strings are interpreted as coordinates,\n(), and tuples with non-finite numbers become nothing (representing empty lines).\n\nThe resulting coordinates are checked for dimension consistency.\n\nExamples\n\nThe following are equivalent:\n\nCoordinates((x, 1/x) for x in -5:5)\nCoordinates(x == 0 ? () : (x, 1/x) for x in -5:5)\nCoordinates(x == 0 ? nothing : Coordinate((x, 1/x)) for x in -5:5)\n\nUse enumerate to add 1, 2, … for the x-axis to an existing set of y coordinates:\n\nCoordinates(enumerate([1, 4, 9]))\n\n\n\n\n\nCoordinates(\n    x,\n    y;\n    xerror,\n    yerror,\n    xerrorplus,\n    yerrorplus,\n    xerrorminus,\n    yerrorminus,\n    meta\n)\n\n\nTwo dimensional coordinates from two vectors, with error bars.\n\n\n\n\n\nCoordinates(\n    x,\n    y,\n    z;\n    xerror,\n    yerror,\n    zerror,\n    xerrorplus,\n    yerrorplus,\n    zerrorplus,\n    xerrorminus,\n    yerrorminus,\n    zerrorminus,\n    meta\n)\n\n\nThree dimensional coordinates from two vectors, with error bars.\n\n\n\n\n\nCoordinates(x, y, z; meta)\n\n\nConstruct coordinates from a matrix of values and edge vectors, such that z[i,j] corresponds to x[i] and y[j]. Empty scanlines are inserted, consistently with the mesh/ordering=x varies option of PGFPlots (the default).\n\nx = range(0; stop = 1, length = 10)\ny = range(-1; stop = 2, length = 13)\nz = sin.(x) + cos.(y')\nCoordinates(x, y, z)\n\n\n\n\n\n","category":"type"},{"location":"man/data/","page":"Data","title":"Data","text":"Examples:","category":"page"},{"location":"man/data/","page":"Data","title":"Data","text":"julia> x = [1, 2, 3]; y = [2, 4, 8]; z = [-1, -2, -3];\n\njulia> print_tex(Coordinates(x, y))\ncoordinates {\n    (1,2)\n    (2,4)\n    (3,8)\n}\n\njulia> print_tex(Coordinates(x, y, z))\ncoordinates {\n    (1,2,-1)\n    (2,4,-2)\n    (3,8,-3)\n}\n\njulia> print_tex(Coordinates(x, x.^3))\ncoordinates {\n    (1,1)\n    (2,8)\n    (3,27)\n}\n\njulia> print_tex(Coordinates([(1.0, 2.0), (2.0, 4.0)]))\ncoordinates {\n    (1.0,2.0)\n    (2.0,4.0)\n}\n\njulia> c = Coordinates(x, y, xerror = [0.2, 0.3, 0.5], yerror = [0.2, 0.1, 0.5]);\n\njulia> print_tex(c)\ncoordinates {\n    (1,2) +- (0.2,0.2)\n    (2,4) +- (0.3,0.1)\n    (3,8) +- (0.5,0.5)\n}","category":"page"},{"location":"man/data/#Individual-coordinates","page":"Data","title":"Individual coordinates","text":"","category":"section"},{"location":"man/data/","page":"Data","title":"Data","text":"Use this constructor when you need just a single Coordinate, eg as in","category":"page"},{"location":"man/data/","page":"Data","title":"Data","text":"@pgf Axis(\n    {\n        legend_style =\n        {\n            at = PGFPlotsX.Coordinate(0.5, -0.15),\n            anchor = \"north\",\n            legend_columns = -1\n        },\n    }, ...)","category":"page"},{"location":"man/data/","page":"Data","title":"Data","text":"Coordinate","category":"page"},{"location":"man/data/#PGFPlotsX.Coordinate","page":"Data","title":"PGFPlotsX.Coordinate","text":"Coordinate(data; error, errorplus, errorminus, meta)\n\n\nConstruct a coordinate, with optional error bars and metadata. data should be a 2- or 3-element tuples of finite real numbers.\n\nYou can specify either\n\nerror, which will then be used for error bars in both directions, or\nerrorplus and/or errorminus, for asymmetrical error bars.\n\nError values can be tuples of the same kind as data, or nothing.\n\nMetadata can be provided in meta.\n\nUsers rarely need to use this constructor, see methods of Coordinates for constructing coordinates from arrays.\n\n\n\n\n\nCoordinate(x, y; args...)\n\n\nConvenience constructor for 2-dimensional coordinates.\n\n\n\n\n\nCoordinate(x, y, z; args...)\n\n\nConvenience constructor for 3-dimensional coordinates.\n\n\n\n\n\n","category":"type"},{"location":"man/data/#Expression","page":"Data","title":"Expression","text":"","category":"section"},{"location":"man/data/","page":"Data","title":"Data","text":"Expression","category":"page"},{"location":"man/data/#PGFPlotsX.Expression","page":"Data","title":"PGFPlotsX.Expression","text":"Expression(expressions::Vector{String})\n\nExpression(strings::String...)\n\nAn Expression is a string or multiple strings, representing a function, and is written in a way LaTeX understands.\n\n\n\n\n\n","category":"type"},{"location":"man/data/","page":"Data","title":"Data","text":"Example:","category":"page"},{"location":"man/data/","page":"Data","title":"Data","text":"julia> ex = Expression(\"exp(-x^2)\");\n\njulia> print_tex(ex)\n{exp(-x^2)}","category":"page"},{"location":"man/data/#Graphics","page":"Data","title":"Graphics","text":"","category":"section"},{"location":"man/data/","page":"Data","title":"Data","text":"Graphics","category":"page"},{"location":"man/data/#PGFPlotsX.Graphics","page":"Data","title":"PGFPlotsX.Graphics","text":"Graphics([options], filename)\n\nGraphics data simply wraps an image (eg a .png file).\n\n\n\n\n\n","category":"type"},{"location":"man/data/","page":"Data","title":"Data","text":"Example:","category":"page"},{"location":"man/data/","page":"Data","title":"Data","text":"julia> print_tex(Graphics(\"img.png\"))\ngraphics {img.png}","category":"page"},{"location":"man/data/#Strings-in-Plot","page":"Data","title":"Strings in Plot","text":"","category":"section"},{"location":"man/data/","page":"Data","title":"Data","text":"Strings (technically, all subtypes of AbstractString) are also accepted by plots, and will be emitted into LaTeX as is. This is mostly useful for using constructs from TikZ that do not have a native representation in this package directly as LaTeX code. See this example.","category":"page"},{"location":"examples/axislike/#Axis-like-objects","page":"Axis-like objects","title":"Axis-like objects","text":"","category":"section"},{"location":"examples/axislike/#Simple-group-plot","page":"Axis-like objects","title":"Simple group plot","text":"","category":"section"},{"location":"examples/axislike/","page":"Axis-like objects","title":"Axis-like objects","text":"using PGFPlotsX\nsavefigs = (figname, obj) -> begin\n    pgfsave(figname * \".pdf\", obj)\n    run(`pdftocairo -svg -l  1 $(figname * \".pdf\") $(figname * \".svg\")`)\n    pgfsave(figname * \".tex\", obj);\n    return nothing\nend","category":"page"},{"location":"examples/axislike/","page":"Axis-like objects","title":"Axis-like objects","text":"","category":"page"},{"location":"examples/axislike/","page":"Axis-like objects","title":"Axis-like objects","text":"cs = [[(0,0), (1,1), (2,2)],\n      [(0,2), (1,1), (2,0)],\n      [(0,2), (1,1), (2,1)],\n      [(0,2), (1,1), (1,0)]]\n\n@pgf gp = GroupPlot(\n    {\n        group_style = { group_size = \"2 by 2\",},\n        height = \"4cm\",\n        width = \"4cm\"\n    }\n)\n\n@pgf for (i, coords) in enumerate(cs)\n    push!(gp, {title = i})\n    push!(gp, PlotInc(Coordinates(coords)))\nend\ngp\nsavefigs(\"groupplot-simple\", ans) # hide","category":"page"},{"location":"examples/axislike/","page":"Axis-like objects","title":"Axis-like objects","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/axislike/","page":"Axis-like objects","title":"Axis-like objects","text":"(Image: )","category":"page"},{"location":"examples/axislike/#Multiple-group-plots","page":"Axis-like objects","title":"Multiple group plots","text":"","category":"section"},{"location":"examples/axislike/","page":"Axis-like objects","title":"Axis-like objects","text":"Each set of options (here, empty {}) starts a new set of axes.","category":"page"},{"location":"examples/axislike/","page":"Axis-like objects","title":"Axis-like objects","text":"x = range(0; stop =2*pi, length = 100)\n@pgf GroupPlot(\n    {\n        group_style =\n        {\n            group_size=\"2 by 1\",\n            xticklabels_at=\"edge bottom\",\n            yticklabels_at=\"edge left\"\n        },\n        no_markers\n    },\n    {},\n    PlotInc(Table(x, sin.(x))),\n    PlotInc(Table(x, sin.(x .+ 0.5))),\n    {},\n    PlotInc(Table(x, cos.(x))),\n    PlotInc(Table(x, cos.(x .+ 0.5))))\nsavefigs(\"groupplot-multiple\", ans) # hide","category":"page"},{"location":"examples/axislike/","page":"Axis-like objects","title":"Axis-like objects","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/axislike/","page":"Axis-like objects","title":"Axis-like objects","text":"(Image: )","category":"page"},{"location":"examples/axislike/#Using-Axis-etc-in-group-plots","page":"Axis-like objects","title":"Using Axis etc in group plots","text":"","category":"section"},{"location":"examples/axislike/","page":"Axis-like objects","title":"Axis-like objects","text":"Alternatively, you can use Axis, SemiLogXAxis, SemiLogYAxis and LogLogAxis to group together options and a set of plots. This makes it easier to combine existing plots into a grouped plot.","category":"page"},{"location":"examples/axislike/","page":"Axis-like objects","title":"Axis-like objects","text":"x = range(0; stop=2, length = 100)\nexp_plot = PlotInc(Table(x, exp.(x)))\nexp_legend = LegendEntry(raw\"$\\exp(x)$\")\nlog_plot = PlotInc(Table(x, log.(x)))\nlog_legend = LegendEntry(raw\"$\\log(x)$\")\n\naxs1 = @pgf Axis(exp_plot, exp_legend, log_plot, log_legend)\naxs2 = @pgf SemiLogYAxis(exp_plot, exp_legend, log_plot, log_legend)\naxs3 = @pgf SemiLogXAxis(exp_plot, exp_legend, log_plot, log_legend)\naxs4 = @pgf LogLogAxis(exp_plot, exp_legend, log_plot, log_legend)\n\n@pgf GroupPlot(\n    { group_style = { group_size=\"2 by 2\" },\n      no_markers,\n      legend_pos=\"north west\",\n      xlabel=raw\"$x$\",\n    },\n    axs1, axs2, axs3, axs4)\nsavefigs(\"groupplot-multiple-axis\", ans) # hide","category":"page"},{"location":"examples/axislike/","page":"Axis-like objects","title":"Axis-like objects","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/axislike/","page":"Axis-like objects","title":"Axis-like objects","text":"(Image: )","category":"page"},{"location":"examples/axislike/#Polar-axis","page":"Axis-like objects","title":"Polar axis","text":"","category":"section"},{"location":"examples/axislike/","page":"Axis-like objects","title":"Axis-like objects","text":"angles = [ℯ/50*360*i for i in 1:500]\nradius = [1/(sqrt(i)) for i in range(1; stop = 10, length = 500)]\nPolarAxis(PlotInc(Coordinates(angles, radius)))\nsavefigs(\"polar\", ans) # hide","category":"page"},{"location":"examples/axislike/","page":"Axis-like objects","title":"Axis-like objects","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/axislike/","page":"Axis-like objects","title":"Axis-like objects","text":"(Image: )","category":"page"},{"location":"examples/axislike/#Smith-Chart","page":"Axis-like objects","title":"Smith Chart","text":"","category":"section"},{"location":"examples/axislike/","page":"Axis-like objects","title":"Axis-like objects","text":" # Samples for 100 MHz to 10 GHz\nfrequency = range(100e6,stop=10e9,length=10)\nL = 1e-9 # 1 nH\nR = 25   # 25 Ω\nZ0 = 50  # 50 Ω Reference\n# Series network of R + jωL, normalized\nnetwork = @. (R + 1.0im*2*pi*frequency*L) / Z0\nSmithChart(Plot(Coordinates([(real(z),imag(z)) for z in network])))\nsavefigs(\"smith\", ans) # hide","category":"page"},{"location":"examples/axislike/","page":"Axis-like objects","title":"Axis-like objects","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/axislike/","page":"Axis-like objects","title":"Axis-like objects","text":"(Image: )","category":"page"},{"location":"examples/axislike/#Ternary-axis","page":"Axis-like objects","title":"Ternary axis","text":"","category":"section"},{"location":"examples/axislike/","page":"Axis-like objects","title":"Axis-like objects","text":"@pgf TernaryAxis(\n    {\n        axis_on_top,\n        xlabel=\"x\", ylabel=\"y\", zlabel=\"z\",\n        colorbar\n    },\n    Plot3(\n        {\n            patch,\n            shader=\"interp\",\n            point_meta=\"\\\\thisrow{C}\"\n        },\n        Table([\"x\" => [0, 1, 0.5, 0.5, 0, 0],\n               \"y\" => [0, 0, 0.5, 0.5, 1, 0],\n               \"z\" => [1, 0, 0, 0, 0, 1],\n               \"C\" => [100, 0, 0, 0, 20, 100]])\n    )\n)\nsavefigs(\"ternary\", ans) # hide","category":"page"},{"location":"examples/axislike/","page":"Axis-like objects","title":"Axis-like objects","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/axislike/","page":"Axis-like objects","title":"Axis-like objects","text":"(Image: )","category":"page"},{"location":"examples/axislike/#Legend-independently-of-axes","page":"Axis-like objects","title":"Legend independently of axes","text":"","category":"section"},{"location":"examples/axislike/","page":"Axis-like objects","title":"Axis-like objects","text":"The following example shows how to construct multiple plots using the same styles, then display the legend separately.","category":"page"},{"location":"examples/axislike/","page":"Axis-like objects","title":"Axis-like objects","text":"First, define some common styles we reuse.","category":"page"},{"location":"examples/axislike/","page":"Axis-like objects","title":"Axis-like objects","text":"using Colors, PGFPlotsX\nx = range(-π, π; length = 100)\nstyles = map(color -> @pgf({ color = color, thick, no_marks }), [colorant\"#faab36\", colorant\"#249ea0\"])","category":"page"},{"location":"examples/axislike/","page":"Axis-like objects","title":"Axis-like objects","text":"Then make use of them to create a plot.","category":"page"},{"location":"examples/axislike/","page":"Axis-like objects","title":"Axis-like objects","text":"function _make_axis(x, fs, styles, ylabel)\n    axis = @pgf Axis({ xlabel = \"x\", ylabel = ylabel })\n    for (f, style) in zip(fs, styles)\n        @pgf push!(axis, Plot(style, Table(x, f.(x))))\n    end\n    axis\nend\n@pgf GroupPlot(\n    {\n        group_style =\n            {\n                group_size=\"2 by 1\",\n                xticklabels_at=\"edge bottom\",\n                yticklabels_at=\"edge left\"\n            },\n    },\n    _make_axis(x, [sin, cos], styles, \"functions\"),\n    _make_axis(x, [cos, x -> -sin(x)], styles, \"derivatives\"),\n)\nsavefigs(\"style-reuse-plots\", ans) # hide","category":"page"},{"location":"examples/axislike/","page":"Axis-like objects","title":"Axis-like objects","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/axislike/","page":"Axis-like objects","title":"Axis-like objects","text":"(Image: )","category":"page"},{"location":"examples/axislike/","page":"Axis-like objects","title":"Axis-like objects","text":"Then we construct the legend.","category":"page"},{"location":"examples/axislike/","page":"Axis-like objects","title":"Axis-like objects","text":"axis = @pgf Axis({ hide_axis, xmin = 0, xmax = 5, ymin = 0, ymax = 1, # magnitudes don't matter\n                   legend_style={ draw=\"white!15!black\", \"legend cell align=left\"}});\nfor (style, label) in zip(styles, [\"sin\", \"cos\"])\n    push!(axis, LegendImage(style), LegendEntry(label))\nend\naxis\nsavefigs(\"style-reuse-legend\", ans) # hide","category":"page"},{"location":"examples/axislike/","page":"Axis-like objects","title":"Axis-like objects","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/axislike/","page":"Axis-like objects","title":"Axis-like objects","text":"(Image: )","category":"page"},{"location":"examples/convenience/#Convenience-constructs","page":"Convenience constructs","title":"Convenience constructs","text":"","category":"section"},{"location":"examples/convenience/","page":"Convenience constructs","title":"Convenience constructs","text":"using PGFPlotsX\nsavefigs = (figname, obj) -> begin\n    pgfsave(figname * \".pdf\", obj)\n    run(`pdftocairo -svg -l  1 $(figname * \".pdf\") $(figname * \".svg\")`)\n    pgfsave(figname * \".tex\", obj);\n    return nothing\nend","category":"page"},{"location":"examples/convenience/#Horizontal-and-vertical-lines","page":"Convenience constructs","title":"Horizontal and vertical lines","text":"","category":"section"},{"location":"examples/convenience/","page":"Convenience constructs","title":"Convenience constructs","text":"x = range(3.01; stop = 6, length = 100)\ny = @. 1/(x-3) + 3\n@pgf Axis(\n    {\n        ymin = 2.5,\n        ymax = 6,\n        xmin = 2.5\n    },\n    Plot(\n        {\n            no_marks\n        },\n        Table(x, y)\n    ),\n    HLine({ dashed, blue }, 3),\n    VLine({ dotted, red }, 3)\n)\nsavefigs(\"hvline\", ans) # hide","category":"page"},{"location":"examples/convenience/","page":"Convenience constructs","title":"Convenience constructs","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/convenience/","page":"Convenience constructs","title":"Convenience constructs","text":"(Image: )","category":"page"},{"location":"examples/convenience/#Horizontal-and-vertical-bands","page":"Convenience constructs","title":"Horizontal and vertical bands","text":"","category":"section"},{"location":"examples/convenience/","page":"Convenience constructs","title":"Convenience constructs","text":"x = range(3.01; stop = 6, length = 100)\ny = @. 1/(x-3) + 3\n@pgf Axis(\n    {\n        ymin = 2.5,\n        ymax = 6,\n        xmin = 2.5,\n        xmax = 6\n    },\n    HBand({ draw=\"none\", fill=\"blue\", opacity = 0.5 }, 3, 4),\n    VBand({ draw=\"none\", fill=\"red\", opacity = 0.5}, 3, 4),\n    Plot(\n        {\n            no_marks\n        },\n        Table(x, y)\n    )\n)\nsavefigs(\"hvband\", ans) # hide","category":"page"},{"location":"examples/convenience/","page":"Convenience constructs","title":"Convenience constructs","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/convenience/","page":"Convenience constructs","title":"Convenience constructs","text":"(Image: )","category":"page"},{"location":"man/internals/#Internals","page":"Internals","title":"Internals","text":"","category":"section"},{"location":"man/internals/","page":"Internals","title":"Internals","text":"DocTestSetup = quote\n    using PGFPlotsX\nend","category":"page"},{"location":"man/internals/","page":"Internals","title":"Internals","text":"print_tex\nPGFPlotsX.print_indent\nPGFPlotsX.expand_scanlines\nPGFPlotsX.CUSTOM_PREAMBLE_PATH\nPGFPlotsX.DEFAULT_PREAMBLE","category":"page"},{"location":"man/internals/#PGFPlotsX.print_tex","page":"Internals","title":"PGFPlotsX.print_tex","text":"print_tex(io, elt, [container])\n\nPrint elt to io as LaTeX code. The optional third argument allows methods to work differently depending on the container.\n\nprint_tex(String, ...) returns the LaTeX code as a String.\n\nThis method should indent as if at the top level, containers indent their contents as necessary. See print_indent.\n\n\n\n\n\nprint_tex(io, str)\n\n\nPrint a string as is, terminated with a newline.\n\nnote: Note\nThis is used as a workaround for LaTeX code that does not have a corresponding type, eg as elements in Axis. raw or LaTeXStrings are useful to avoid piling up backslashes. The newline is added to separate tokens.\n\n\n\n\n\nprint_tex(io, vector)\n\n\nVectors are emitted elementwise without any extra whitespace as LaTeX code, using the print_tex method for each element.\n\n\n\n\n\nprint_tex(io, x)\n\n\nReal numbers are printed as is, except for non-finite representation.\n\n\n\n\n\n","category":"function"},{"location":"man/internals/#PGFPlotsX.print_indent","page":"Internals","title":"PGFPlotsX.print_indent","text":"print_indent(f, io_main)\n\n\nCall the f with an IO buffer, capture the output, print it to io_main indented with four spaces.\n\n\n\n\n\nprint_indent(io_main, elt)\n\n\nPrint elt to io with indentation. Shortcut for the function wrapper of print_indent for a single element.\n\n\n\n\n\n","category":"function"},{"location":"man/internals/#PGFPlotsX.expand_scanlines","page":"Internals","title":"PGFPlotsX.expand_scanlines","text":"expand_scanlines(n, nrow)\n\n\nExpand scanlines, which is a vector of scanline positions or an integer for repeated scanlines, into a Vector{Int}.\n\n\n\n\n\n","category":"function"},{"location":"man/internals/#PGFPlotsX.CUSTOM_PREAMBLE_PATH","page":"Internals","title":"PGFPlotsX.CUSTOM_PREAMBLE_PATH","text":"A file which is spliced directly to the preamble. Customize the file at this path for site-specific setting that apply for every plot.\n\n\n\n\n\n","category":"constant"},{"location":"man/internals/#PGFPlotsX.DEFAULT_PREAMBLE","page":"Internals","title":"PGFPlotsX.DEFAULT_PREAMBLE","text":"The default preamble for LaTeX documents. Don't change this, customize CUSTOM_PREAMBLE instead.\n\n\n\n\n\n","category":"constant"},{"location":"examples/gallery/#manual_gallery","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"","category":"section"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"Gallery to show off different features of PGFPlots and how they can be used from PGFPlotsX.jl.","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"using PGFPlotsX\nsavefigs = (figname, obj) -> begin\n    pgfsave(figname * \".pdf\", obj)\n    run(`pdftocairo -svg -l  1 $(figname * \".pdf\") $(figname * \".svg\")`)\n    pgfsave(figname * \".tex\", obj);\n    return nothing\nend","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"","category":"page"},{"location":"examples/gallery/#Cost-Error","page":"PGFPlots gallery","title":"Cost Error","text":"","category":"section"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"@pgf Axis(\n    {\n        xlabel = \"Cost\",\n        ylabel = \"Error\",\n    },\n    Plot(\n        {\n            color = \"red\",\n            mark  = \"x\"\n        },\n        Coordinates(\n            [\n                (2, -2.8559703),\n                (3, -3.5301677),\n                (4, -4.3050655),\n                (5, -5.1413136),\n                (6, -6.0322865),\n                (7, -6.9675052),\n                (8, -7.9377747),\n            ]\n        ),\n    ),\n)\nsavefigs(\"cost-error\", ans) # hide","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"(Image: )","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"","category":"page"},{"location":"examples/gallery/#Simple-Expression","page":"PGFPlots gallery","title":"Simple Expression","text":"","category":"section"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"using LaTeXStrings\n@pgf Axis(\n    {\n        xlabel = L\"x\",\n        ylabel = L\"f(x) = x^2 - x + 4\"\n    },\n    Plot(\n        Expression(\"x^2 - x + 4\")\n    )\n)\nsavefigs(\"simple-expression\", ans) # hide","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"(Image: )","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"","category":"page"},{"location":"examples/gallery/#Mixing-expression-and-coordinates","page":"PGFPlots gallery","title":"Mixing expression and coordinates","text":"","category":"section"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"@pgf Axis(\n    {\n        height = \"9cm\",\n        width = \"9cm\",\n        grid = \"major\",\n    },\n    PlotInc(Expression(\"-x^5 - 242\")),\n    LegendEntry(\"model\"),\n    PlotInc(Coordinates(\n        [\n            (-4.77778,2027.60977),\n            (-3.55556,347.84069),\n            (-2.33333,22.58953),\n            (-1.11111,-493.50066),\n            (0.11111,46.66082),\n            (1.33333,-205.56286),\n            (2.55556,-341.40638),\n            (3.77778,-1169.24780),\n            (5.00000,-3269.56775),\n        ]\n    )),\n    LegendEntry(\"estimate\")\n)\nsavefigs(\"cost-gain\", ans) # hide","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"(Image: )","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"","category":"page"},{"location":"examples/gallery/#Log-logLog","page":"PGFPlots gallery","title":"Log logLog","text":"","category":"section"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"@pgf LogLogAxis(\n    {\n        xlabel = \"Cost\",\n        ylabel = \"Gain\"\n    },\n    Plot(\n        {\n            color = \"red\",\n            mark  = \"x\"\n        },\n        Coordinates(\n            [\n                (10, 100),\n                (20, 150),\n                (40, 225),\n                (80, 340),\n                (160, 510),\n                (320, 765),\n                (640, 1150),\n            ]\n        )\n    )\n)\nsavefigs(\"cost-gain-log-log\", ans) # hide","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"(Image: )","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"","category":"page"},{"location":"examples/gallery/#Yaxis-log","page":"PGFPlots gallery","title":"Yaxis log","text":"","category":"section"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"@pgf Axis(\n    {\n        xlabel = \"Cost\",\n        ylabel = \"Gain\",\n        ymode = \"log\",\n    },\n    Plot(\n        {\n            color = \"blue\",\n            mark  = \"*\"\n        },\n        Coordinates(\n            [\n                (1, 8)\n                (2, 16)\n                (3, 32)\n                (4, 64)\n                (5, 128)\n                (6, 256)\n                (7, 512)\n            ]\n        )\n    )\n)\nsavefigs(\"cost-gain-ylog\", ans) # hide","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"(Image: )","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"","category":"page"},{"location":"examples/gallery/#Dof-vs-error","page":"PGFPlots gallery","title":"Dof vs error","text":"","category":"section"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"using LaTeXStrings\n@pgf Axis(\n    {\n        xlabel = \"Degrees of freedom\",\n        ylabel = L\"$L_2$ Error\",\n        xmode  = \"log\",\n        ymode  = \"log\",\n    },\n    Plot(Coordinates(\n        [(   5, 8.312e-02), (  17, 2.547e-02), (  49, 7.407e-03),\n         ( 129, 2.102e-03), ( 321, 5.874e-04), ( 769, 1.623e-04),\n         (1793, 4.442e-05), (4097, 1.207e-05), (9217, 3.261e-06),]\n    )),\n    Plot(Coordinates(\n        [(   7, 8.472e-02), (   31, 3.044e-02), (111,   1.022e-02),\n         ( 351, 3.303e-03), ( 1023, 1.039e-03), (2815,  3.196e-04),\n         (7423, 9.658e-05), (18943, 2.873e-05), (47103, 8.437e-06),]\n    )),\n    Plot(Coordinates(\n        [(    9, 7.881e-02), (   49, 3.243e-02), (   209, 1.232e-02),\n         (  769, 4.454e-03), ( 2561, 1.551e-03), (  7937, 5.236e-04),\n         (23297, 1.723e-04), (65537, 5.545e-05), (178177, 1.751e-05),]\n    )),\n    Plot(Coordinates(\n        [(   11, 6.887e-02), (    71, 3.177e-02), (   351, 1.341e-02),\n         ( 1471, 5.334e-03), (  5503, 2.027e-03), ( 18943, 7.415e-04),\n         (61183, 2.628e-04), (187903, 9.063e-05), (553983, 3.053e-05),]\n    )),\n    Plot(Coordinates(\n        [(    13, 5.755e-02), (    97, 2.925e-02), (    545, 1.351e-02),\n         (  2561, 5.842e-03), ( 10625, 2.397e-03), (  40193, 9.414e-04),\n         (141569, 3.564e-04), (471041, 1.308e-04), (1496065, 4.670e-05),]\n    ))\n)\nsavefigs(\"dof-error\", ans) # hide","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"(Image: )","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"","category":"page"},{"location":"examples/gallery/#Scatter-classes","page":"PGFPlots gallery","title":"Scatter classes","text":"","category":"section"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"@pgf Axis(\n    {\n        \"scatter/classes\" = {\n            a = {mark = \"square*\", \"blue\"},\n            b = {mark = \"triangle*\", \"red\"},\n            c = {mark = \"o\", draw = \"black\"},\n        }\n    },\n    Plot(\n        {\n            scatter,\n            \"only marks\",\n            \"scatter src\" = \"explicit symbolic\",\n        },\n        Table(\n            {\n                meta = \"label\"\n            },\n            x = [0.1, 0.45, 0.02, 0.06, 0.9 , 0.5 , 0.85, 0.12, 0.73, 0.53, 0.76, 0.55],\n            y = [0.15, 0.27, 0.17, 0.1, 0.5, 0.3, 0.52, 0.05, 0.45, 0.25, 0.5, 0.32],\n            label = [\"a\", \"c\", \"a\", \"a\", \"b\", \"c\", \"b\", \"a\", \"b\", \"c\", \"b\", \"c\"],\n        )\n    )\n)\nsavefigs(\"table-label\", ans) # hide","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"(Image: )","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"","category":"page"},{"location":"examples/gallery/#Splines","page":"PGFPlots gallery","title":"Splines","text":"","category":"section"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"@pgf Axis(\n    {\n        \"nodes near coords\" = raw\"(\\coordindex)\",\n        title = raw\"\\texttt{patch type=quadratic spline}\",\n    },\n    Plot(\n        {\n            mark = \"*\",\n            patch,\n            mesh, # without mesh, pgfplots tries to fill,\n            # \"patch type\" = \"quadratic spline\", <- Should work??\n        },\n        Coordinates(\n            [\n                # left, right, middle-> first segment\n                (0, 0),   (1, 1),   (0.5, 0.5^2),\n                # left, right, middle-> second segment\n                (1.2, 1), (2.2, 1), (1.7, 2),\n            ]\n        )\n    )\n)\nsavefigs(\"spline-quadratic\", ans) # hide","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"(Image: )","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"","category":"page"},{"location":"examples/gallery/#Mesh-scatter","page":"PGFPlots gallery","title":"Mesh scatter","text":"","category":"section"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"@pgf Plot3(\n    {\n        mesh,\n        scatter,\n        samples = 10,\n        domain = \"0:1\"\n    },\n    Expression(\"x * (1-x) * y * (1-y)\")\n)\nsavefigs(\"mesh-scatter\", ans) # hide","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"(Image: )","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"","category":"page"},{"location":"examples/gallery/#Group-plot","page":"PGFPlots gallery","title":"Group plot","text":"","category":"section"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"# this is an imitation of the figure in the manual, as we generate the data\nx = range(0; stop = 10, length = 100)\n@pgf plot = Plot({very_thick}, Table(x = x, y = @. (sin(x * 8) + 1) * 4 * x))\n@pgf GroupPlot(\n    {\n        group_style =\n        {\n            group_size=\"2 by 2\",\n            horizontal_sep=\"0pt\",\n            vertical_sep=\"0pt\",\n            xticklabels_at=\"edge bottom\"\n        },\n        xmin = 0,\n        ymin = 0,\n        height = \"3.7cm\",\n        width = \"4cm\",\n        no_markers\n    },\n    nothing,\n    {xmin=5, xmax=10, ymin=50, ymax=100},\n    plot,\n    {xmax=5, ymax=50},\n    plot,\n    {xmin=5, xmax=10, ymax=50, yticklabels={}},\n    plot\n)\nsavefigs(\"groupplot-nested\", ans) # hide","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"(Image: )","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"","category":"page"},{"location":"examples/gallery/#Patch","page":"PGFPlots gallery","title":"Patch","text":"","category":"section"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"@pgf Axis(Plot(\n    {\n        patch,\n        \"table/row sep\" = \"\\\\\\\\\",\n        patch_table = TableData([0 1 2;\n                                 1 2 3;\n                                 4 3 5])\n    },\n    Table(\n        {\n            point_meta = raw\"\\thisrow{c}\"\n        },\n        :x => [0, 1, 2, 3, 2, 4],\n        :y => [0, 1, 0, 1, 0, 0],\n        :c => [0.2, 0, 1, 0, 0.5, 0.5])))\nsavefigs(\"patch-inline\", ans) # hide","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"(Image: )","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"","category":"page"},{"location":"examples/gallery/#D-Waterfall","page":"PGFPlots gallery","title":"3D Waterfall","text":"","category":"section"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"using Random\nusing Distributions\n\nRandom.seed!(42)\n#Generate Data\nx_min = -10 # xrange to plot\nx_max = 10\nμ_min = -5\nμ_max = 5\n\ndist = (μ, σ) -> Normal(μ, σ)\n# make the set of distributions we're going to plot:\ndists = [dist(-6+i, 1+0.3*i) for i in 1:10]\n# creates random scatter points:\nrnd = rand.(Truncated.(dists, x_min, x_max), 20)\n# get the pdf of the dists:\ndat_pdf = [(x) -> pdf.(d, x) for d in dists]\n\n# point density for pdfs\nx_pnts = collect(x_min:0.05:x_max)\n\n# add redundant points at the ends, for nicer fill:\nx_pnts_ext = [[x_pnts[1]]; x_pnts; [x_pnts[end]]]\n\n# define the Axis to which we will push! the contents of the plot\naxis = @pgf Axis(\n    {\n        width = raw\"1\\textwidth\",\n        height = raw\"0.6\\textwidth\",\n        grid = \"both\",\n        xmax = x_max,\n        xmin = x_min,\n        zmin = 0,\n        \"axis background/.style\" = { fill = \"gray!10\" }, # add some beauty\n        # this is needed to make the scatter points appear behind the graphs:\n        set_layers,\n        view = \"{49}{25}\",   # viewpoint\n        ytick = collect(0:9),\n        ztick = collect(0:0.1:1)\n    },\n)\n\n# draw a yellow area at the bottom of the plot, centered at μ and 2σ wide.\n@pgf area = Plot3(\n    {\n        no_marks,\n        style =\"{dashed}\",\n        color = \"black\",\n        fill = \"yellow!60\",\n        fill_opacity = 0.65,\n        # so we can see the grid lines through the colored area:\n        on_layer = \"axis background\"\n    },\n    Table(x = [dists[1  ].μ - dists[1  ].σ, dists[end].μ - dists[end].σ,\n               dists[end].μ + dists[end].σ, dists[1  ].μ + dists[1  ].σ],\n          y = [length(rnd) - 1, 0, 0, length(rnd) - 1],\n          z = [0, 0, 0, 0]\n         ),\n    raw\"\\closedcycle\"\n)\npush!(axis, area)\n\n# add the slices as individual plots to the common axis\n@pgf for i in eachindex(dists)\n    scatter = Plot3(\n        {\n            only_marks,\n            color = \"red!80\",\n            mark_options = {scale=0.4},\n            # set the markers on the same layer as the plot:\n            mark_layer = \"like plot\",\n            on_layer = \"axis background\"\n        },\n        Table(x = rnd[i],\n              y = (length(dists) - i) * ones(length(rnd[i])),\n              z = zeros(length(rnd[i])))\n    )\n    push!(axis, scatter)\n\n    # add a pdf-curve on top of each second data set\n    if i%2 == 1\n        curve = Plot3(\n            {\n                no_marks,\n                style = {thick},\n                color = \"blue\"\n            },\n            Table(x = x_pnts,\n                  y = (length(dists) - i) * ones(length(x_pnts)),\n                  z = dat_pdf[i](x_pnts))\n        )\n\n        # The fill is drawn seperately to handle the the end of the curves nicely.\n        # This is an alternative to \"\\fillbetween\"\n        fill = Plot3(\n            {\n                draw = \"none\",\n                fill = \"blue\",\n                fill_opacity = 0.25\n            },\n            Table(x = x_pnts_ext,\n                  y = (length(dists) - i) * ones(length(x_pnts_ext)),\n                  z = [[0]; dat_pdf[i](x_pnts); [0]])\n        )\n        push!(axis, curve, fill)\n    end\nend\n\nsavefigs(\"3d_waterfall\", axis) # hide","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"(Image: )","category":"page"},{"location":"examples/gallery/#Parametric-3D-curve","page":"PGFPlots gallery","title":"Parametric 3D curve","text":"","category":"section"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"This nice parametric curve was adapted from a TeXWelt answer. We calculate the curve in Julia using broadcasting, and use the colors from the Julia logo.","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"p1 = range(0, 360; length = 100)' # parameter 1\np2 = range(0, 360; length = 70)   # parameter 2\nw1 = @. sind(3*(p1 + 2 * p2)) + 1.25 # wave 1\nw2 = @. 6 + w1 * cosd(p1)            # wave 2\nx = vec(@. w2 * cosd(p2))\ny = vec(@. w2 * sind(p2))\nz = vec(@. w1 * sind(p1))\nlogo_colors = [(77,100,174), (57,151,79), (255,255,255), (146,89,163), (202,60,50)]\n\n@pgf Axis(\n    {\n        axis_equal,\n        axis_lines = \"none\"\n    },\n    Plot3(\n        {\n            surf,\n            z_buffer = \"sort\",\n            colormap = \"{Julia}{$(join(map(c -> \"rgb255=$c\", logo_colors), \", \"))}\",\n            \"mesh/rows\" = length(p1)\n        },\n        Table(x, y, z)))\nsavefigs(\"3d_parametric\", ans) # hide","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/gallery/","page":"PGFPlots gallery","title":"PGFPlots gallery","text":"(Image: )","category":"page"},{"location":"man/options/#options_header","page":"Options","title":"Options","text":"","category":"section"},{"location":"man/options/","page":"Options","title":"Options","text":"Options, which usually occur between brackets ([]) after commands like \\addplot, table, or beginnings of environments like \\begin{axis} in LaTeX code, are key to most of the functionality of PGFPlots.","category":"page"},{"location":"man/options/","page":"Options","title":"Options","text":"DocTestSetup = quote\n    using PGFPlotsX\nend","category":"page"},{"location":"man/options/#The-@pgf-macro","page":"Options","title":"The @pgf macro","text":"","category":"section"},{"location":"man/options/","page":"Options","title":"Options","text":"Use the @pgf {} macro to define options.","category":"page"},{"location":"man/options/","page":"Options","title":"Options","text":"@pgf","category":"page"},{"location":"man/options/#PGFPlotsX.@pgf","page":"Options","title":"PGFPlotsX.@pgf","text":"@pgf { ... }\n\n@pgf some(nested(form({ ... })),\n          with_multiple_options({ ... }))\n\nConstruct Options from comma-delimited key (without value), key = value, key : value, or key => value pairs enclosed in { ... }, anywhere in the expression.\n\nKeys can be\n\nsymbols, which are converted to strings, with _ replaced by spaces,\nstrings or raw strings, used as is\n\nThe argument is traversed recursively, allowing { ... } expressions in multiple places.\n\nMulti-word keys need to be either quoted, or written as strings with underscores.\n\n@pgf {\n    \"only marks\",\n    mark_size = \"0.6pt\",\n    mark = \"o\",\n    color => \"black\",\n}\n\nAnother Options can be spliced into one being created using ..., e.g.\n\ntheme = @pgf {xmajorgrids, x_grid_style = \"white\"}\n\naxis_opt = @pgf {theme..., title = \"My figure\"}\n\nUse {} for empty options that print as [] in LaTeX.\n\n\n\n\n\n","category":"macro"},{"location":"man/options/","page":"Options","title":"Options","text":"For constructors that accept options, they always come first. When omitted, there are assumed to be no options.","category":"page"},{"location":"man/options/","page":"Options","title":"Options","text":"julia> c = Coordinates([1, 2, 3], [2, 4, 8]);\n\njulia> p = @pgf PlotInc({ \"very thick\", \"mark\" => \"halfcircle\" }, c);\n\njulia> print_tex(p); # print_tex can be used to preview the generated .tex\n\\addplot+[very thick, mark={halfcircle}]\n    coordinates {\n        (1,2)\n        (2,4)\n        (3,8)\n    }\n    ;","category":"page"},{"location":"man/options/","page":"Options","title":"Options","text":"Inside the expression following @pgf, {} expressions can be nested, and can also occur in multiple places.","category":"page"},{"location":"man/options/","page":"Options","title":"Options","text":"julia> @pgf a = Axis(\n           {\n               \"axis background/.style\" =\n               {\n                   shade,\n                   top_color = \"gray\",\n                   bottom_color = \"white\",\n               },\n               ymode = \"log\"\n           },\n           PlotInc(\n           {\n               smooth\n           },\n           c)\n       );","category":"page"},{"location":"man/options/","page":"Options","title":"Options","text":"which is converted to LaTeX as","category":"page"},{"location":"man/options/","page":"Options","title":"Options","text":"julia> print_tex(a)\n\\begin{axis}[axis background/.style={shade, top color={gray}, bottom color={white}}, ymode={log}]\n    \\addplot+[smooth]\n        coordinates {\n            (1,2)\n            (2,4)\n            (3,8)\n        }\n        ;\n\\end{axis}","category":"page"},{"location":"man/options/","page":"Options","title":"Options","text":"note: Note\nIf you use @pgf inside argument lists, make sure you wrap its argument in parentheses, egPlot(@pgf({ scatter }), some_table)Otherwise Julia will also pass the subsequent arguments through @pgf, which results in an error since they are combined into a tuple.","category":"page"},{"location":"man/options/","page":"Options","title":"Options","text":"Each option is either a standalone keyword (without value, modifying the plot by itself), or a keyword-value pair. Keywords can be entered","category":"page"},{"location":"man/options/","page":"Options","title":"Options","text":"as Julia symbols (eg smooth); in symbols, underscores are replaced by spaces which allows entering multi-word keys (eg only_marks will appear in LaTeX code as only marks),\nor quoted as strings, eg \"very thick\".","category":"page"},{"location":"man/options/","page":"Options","title":"Options","text":"Values are provided after a =, :, or =>, so the following are equivalent:","category":"page"},{"location":"man/options/","page":"Options","title":"Options","text":"@pgf { draw = \"black\" },\n@pgf { draw : \"black\" },\n@pgf { draw => \"black\" }.","category":"page"},{"location":"man/options/","page":"Options","title":"Options","text":"Values should be valid Julia expressions, as they are evaluated, so you cannot use @pgf { draw = black } unless black is assigned to some Julia value in that context.","category":"page"},{"location":"man/options/","page":"Options","title":"Options","text":"note: Note\nKeys that contain spaces (eg marks only), underscores (eg tdplot_main_coords), or symbols that in Julia are operators (eg axis background/.style) have to be entered as strings.","category":"page"},{"location":"man/options/#Transformations","page":"Options","title":"Transformations","text":"","category":"section"},{"location":"man/options/","page":"Options","title":"Options","text":"The following transformations of values are done when the options are written in .tex style:","category":"page"},{"location":"man/options/","page":"Options","title":"Options","text":"A list as a value is written as “comma joined” e.g. [1, 2, 3] -> \"1, 2, 3\".\nA tuple as a value is written with braces delimiting the elements e.g. (60, 30) -> {60}{30}","category":"page"},{"location":"man/options/#Modifying-options-after-an-object-is-created","page":"Options","title":"Modifying options after an object is created","text":"","category":"section"},{"location":"man/options/","page":"Options","title":"Options","text":"It is sometimes convenient to set and get options after an object has been created.","category":"page"},{"location":"man/options/","page":"Options","title":"Options","text":"You can use getindex, setindex! (ie obj[\"option\"] or obj[\"option\"] = value, respectively), and delete! just like you would for modifiable associative collections (eg a Dict).","category":"page"},{"location":"man/options/","page":"Options","title":"Options","text":"julia> c = Coordinates([1, 2, 3], [2, 4, 8]);\n\njulia> p = PlotInc(c);\n\njulia> p[\"fill\"] = \"blue\";\n\njulia> p[\"fill\"]\n\"blue\"\n\njulia> @pgf p[\"axis background/.style\"] = { shade, top_color = \"gray\", bottom_color = \"white\" };\n\njulia> p[\"axis background/.style\"][\"top color\"];\n\njulia> p[\"very thick\"] = nothing # Set a value-less options;\n\njulia> delete!(p, \"fill\");\n\njulia> print_tex(p)\n\\addplot+[axis background/.style={shade, top color={gray}, bottom color={white}}, very thick]\n    coordinates {\n        (1,2)\n        (2,4)\n        (3,8)\n    }\n    ;","category":"page"},{"location":"man/options/#Working-with-options","page":"Options","title":"Working with options","text":"","category":"section"},{"location":"man/options/","page":"Options","title":"Options","text":"Collections of options are first-class objects: they can be used independently of Plot, Axis, and similar, copied, modified, and merged.","category":"page"},{"location":"man/options/","page":"Options","title":"Options","text":"This allows a disciplined approach to working with complex plots: for example, you can create a set of default options for some purpose (eg plots in a research paper, with a style imposed by a journal), and then modify this as needed for individual plots. It is then easy to apply, for example, a “theme” to an axis where the theme is a set of options already saved.","category":"page"},{"location":"man/options/","page":"Options","title":"Options","text":"Another use case is creating orthogonal sets of options, eg one for axis annotations and another one for legends, and merging these as necessary.","category":"page"},{"location":"man/options/#Extending-and-combining-options","page":"Options","title":"Extending and combining options","text":"","category":"section"},{"location":"man/options/","page":"Options","title":"Options","text":"Use  ... to splice an option into another one, e.g.","category":"page"},{"location":"man/options/","page":"Options","title":"Options","text":"julia> theme = @pgf {xmajorgrids, ymajorgrids};\n\njulia> a = Axis(\n           @pgf {theme..., title = \"Foo\"}\n       );\n\njulia> print_tex(a)\n\\begin{axis}[xmajorgrids, ymajorgrids, title={Foo}]\n\\end{axis}\n\njulia> print_tex(theme) # original is not modified\n[xmajorgrids, ymajorgrids]","category":"page"},{"location":"man/options/","page":"Options","title":"Options","text":"You can also merge sets of options:","category":"page"},{"location":"man/options/","page":"Options","title":"Options","text":"julia> O1 = @pgf { color = \"red\" };\n\njulia> O2 = @pgf { dashed };\n\njulia> O3 = @pgf { no_marks };\n\njulia> print_tex(Plot(merge(O1, O2, O3), Table(1:2, 1:2)))\n\\addplot[color={red}, dashed, no marks]\n    table[row sep={\\\\}]\n    {\n        \\\\\n        1  1  \\\\\n        2  2  \\\\\n    }\n    ;","category":"page"},{"location":"man/options/","page":"Options","title":"Options","text":"Again, the value of original options is unchanged above.","category":"page"},{"location":"man/options/#Modifying-options","page":"Options","title":"Modifying options","text":"","category":"section"},{"location":"man/options/","page":"Options","title":"Options","text":"You can modify existing options with push!, append!, and merge!. The first two expect pairs of a string and a value (may be nothing for options like \"red\"), and are mostly useful when you are generating options using a function. merge! of course accepts options.","category":"page"},{"location":"man/options/","page":"Options","title":"Options","text":"julia> opt = @pgf {};\n\njulia> push!(opt, :color => \"red\", :mark => \"x\");\n\njulia> append!(opt, [:style => \"thick\", :mark_options => @pgf { scale = 0.4 }]);\n\njulia> merge!(opt, @pgf { \"error bars/y dir=both\", \"error bars/y explicit\" });\n\njulia> print_tex(opt)\n[color={red}, mark={x}, style={thick}, mark options={scale={0.4}}, error bars/y dir=both, error bars/y explicit]","category":"page"},{"location":"man/options/","page":"Options","title":"Options","text":"All containers with options also support using merge! directly.","category":"page"},{"location":"man/options/","page":"Options","title":"Options","text":"julia> a = Axis();\n\njulia> @pgf opts = {xmin = 0, ymax = 1, ybar};\n\njulia> merge!(a, opts);\n\njulia> print_tex(a)\n\\begin{axis}[xmin={0}, ymax={1}, ybar]\n\\end{axis}","category":"page"},{"location":"man/options/#Empty-options","page":"Options","title":"Empty options","text":"","category":"section"},{"location":"man/options/","page":"Options","title":"Options","text":"Empty options are not emitted by default, but using in LaTeX code [] can be useful in some cases, eg when combined with global settings \\pgfplotsset{every axis plot/.append style={...}}. In order to force printing empty options, it is recommended to use {} in expressions like","category":"page"},{"location":"man/options/","page":"Options","title":"Options","text":"@pgf Plot({}, ...)","category":"page"},{"location":"man/options/#The-PGFPlotsX.Options-constructor","page":"Options","title":"The PGFPlotsX.Options constructor","text":"","category":"section"},{"location":"man/options/","page":"Options","title":"Options","text":"PGFPlotsX.Options","category":"page"},{"location":"man/options/#PGFPlotsX.Options","page":"Options","title":"PGFPlotsX.Options","text":"Options(args; print_empty)\n\n\nOptions passed to PGFPlots for various structures (table, plot, etc).\n\nContents emitted in key = value form, or key when value ≡ nothing. Example:\n\njulia> PGFPlotsX.Options(:color => \"red\", :only_marks => nothing)\n[color={red}, only marks]\n\nThe constuctor is not exported but part of the API, for use in packages that depend on PGFPlotsX, or code producing complicated plots. It is recommended that the @pgf macro is used in scripts and interactive code.\n\nWhen print_empty = false (the default), empty options are not printed. Use print_empty = true to force printing a [] in this case.\n\n\n\n\n\n","category":"type"},{"location":"examples/juliatypes/#Julia-types","page":"Julia types","title":"Julia types","text":"","category":"section"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"There is some support to directly use Julia objects from different popular packages in PGFPlotsX.jl. Examples of these are given here.","category":"page"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"using PGFPlotsX\nsavefigs = (figname, obj) -> begin\n    pgfsave(figname * \".pdf\", obj)\n    run(`pdftocairo -svg -l  1 $(figname * \".pdf\") $(figname * \".svg\")`)\n    pgfsave(figname * \".tex\", obj);\n    return nothing\nend","category":"page"},{"location":"examples/juliatypes/#Dates","page":"Julia types","title":"Dates","text":"","category":"section"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"Dates is a standard library in Julia. Date and DateTime types are supported natively, but you should specify the date_coordinates_in = ... option in your plot for the relevant axes.","category":"page"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"using Dates\ndategrid = Date(2000,1,1):Day(1):Date(2000,12,31)\nrelative_irradiance(d) = (1 + 0.034*cospi(2*Dates.dayofyear(d)/365.25))\n\n@pgf Axis(\n    {\n        date_coordinates_in = \"x\",\n        x_tick_label_style = \"{rotate=90}\",\n        xlabel = \"date\",\n        ylabel = \"relative solar irradiance\",\n    },\n    VBand({ draw=\"none\", fill=\"red\", opacity = 0.5}, dategrid[50], dategrid[100]),\n    Plot(\n    {\n        no_marks\n    },\n    Table(dategrid, relative_irradiance.(dategrid))))\nsavefigs(\"dates\", ans) # hide","category":"page"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"(Image: )","category":"page"},{"location":"examples/juliatypes/#Colors.jl","page":"Julia types","title":"Colors.jl","text":"","category":"section"},{"location":"examples/juliatypes/#LineColor","page":"Julia types","title":"LineColor","text":"","category":"section"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"Using a colorant as the line color","category":"page"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"using Colors\nμ = 0\nσ = 1e-3\n\naxis = Axis()\n@pgf for (i, col) in enumerate(distinguishable_colors(10))\n    offset = i * 50\n    p = Plot(\n        {\n            color = col,\n            domain = \"-3*$σ:3*$σ\",\n            style = { ultra_thick },\n            samples = 50\n        },\n        Expression(\"exp(-(x-$μ)^2 / (2 * $σ^2)) / ($σ * sqrt(2*pi)) + $offset\"))\n    push!(axis, p)\nend\naxis\nsavefigs(\"colors\", ans) # hide","category":"page"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"(Image: )","category":"page"},{"location":"examples/juliatypes/#Colormap","page":"Julia types","title":"Colormap","text":"","category":"section"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"Using a colormap","category":"page"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"using Colors\np = @pgf Plot3(\n    {\n        surf,\n        point_meta = \"y\",\n        samples = 13\n    },\n    Expression(\"cos(deg(x)) * sin(deg(y))\")\n)\ncolormaps = [\"Blues\", \"Greens\", \"Oranges\", \"Purples\"]\ntd = TikzDocument()\nfor cmap in colormaps\n    push_preamble!(td, (cmap, Colors.colormap(cmap)))\nend\n\ntp = @pgf TikzPicture({ \"scale\" => 0.5 })\npush!(td, tp)\ngp = @pgf GroupPlot({ group_style = {group_size = \"2 by 2\"}})\npush!(tp, gp)\n\nfor cmap in colormaps\n    @pgf push!(gp, { colormap_name = cmap }, p)\nend\nsavefigs(\"colormap\", td) # hide","category":"page"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"(Image: )","category":"page"},{"location":"examples/juliatypes/#Explicit-colors-in-surface-plots","page":"Julia types","title":"Explicit colors in surface plots","text":"","category":"section"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"When used outside options, all Colors.Colorant colors are printed in the format that can be used in surface plots explicitly.","category":"page"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"using Colors\nhues = 0:30:360\nsaturations = 0:0.1:1\nHS = vec(tuple.(hues, saturations'))\nc = Coordinates(first.(HS), last.(HS); meta = [HSL(hs..., 0.5) for hs in HS])\n@pgf Axis(\n    {\n        enlargelimits = false,\n        xlabel = \"hue (degrees)\",\n        ylabel = \"saturation\"\n    },\n    Plot(\n        {\n            \"matrix plot*\",\n            no_marks,\n            \"mesh/color input\" = \"explicit\",\n            \"mesh/cols\" = length(hues)\n        },\n        c))\nsavefigs(\"explicit_surface_color\", ans) # hide","category":"page"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"(Image: )","category":"page"},{"location":"examples/juliatypes/#ggplot2","page":"Julia types","title":"ggplot2","text":"","category":"section"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"Something that looks a bit like ggplot2.","category":"page"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"using Colors\nusing LaTeXStrings\n\nggplot2_axis_theme = @pgf {\n    tick_align = \"outside\",\n    tick_pos = \"left\",\n    xmajorgrids,\n    x_grid_style = \"white\",\n    ymajorgrids,\n    y_grid_style = \"white\",\n    axis_line_style = \"white\",\n    \"axis_background/.style\" = {\n        fill = \"white!89.803921568627459!black\"\n    }\n}\n\nggplot2_plot_theme = @pgf {\n    mark=\"*\",\n    mark_size = 3,\n    mark_options = \"solid\",\n    line_width = \"1.64pt\",\n}\n\nx = 0:0.3:2\ny1 = sin.(2x)\ny2 = cos.(2x)\ny3 = cos.(5x)\nys = [y1, y2, y3]\nn = length(ys)\n\n# Evenly spread out colors\ncolors = [LCHuv(65, 100, h) for h in range(15; stop = 360+15, length = n+1)][1:n]\n\n@pgf Axis(\n    {\n         ggplot2_axis_theme...,\n         xmin = -0.095, xmax = 1.995,\n         ymin = -1.1,   ymax =1.1,\n         title = L\"Simple plot $\\frac{\\alpha}{2}$\",\n         xlabel = \"time (s)\",\n         ylabel = \"Voltage (mV)\",\n    },\n    [\n        PlotInc(\n            {\n                ggplot2_plot_theme...,\n                color = colors[i]\n            },\n            Coordinates(x, _y))\n        for (i, _y) in enumerate(ys)]...,\n)\nsavefigs(\"ggplot\", ans) # hide","category":"page"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"(Image: )","category":"page"},{"location":"examples/juliatypes/#DataFrames.jl","page":"Julia types","title":"DataFrames.jl","text":"","category":"section"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"Creating a Table from a DataFrame will write it as expected.","category":"page"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"using DataFrames\n\nfunction mockdata(n, μ, σ, speed, racer)\n    distance = exp.(μ .+ randn(n).*σ)\n    noise = exp.(randn(n) * 0.1)\n    DataFrame(distance = distance,\n              tracktime = distance ./ (speed .* noise),\n              racer = fill(racer, n))\nend\n\nzenon_measurements = vcat(mockdata(20, 1, 0.2, 0.5, \"Tortoise\"),\n                          mockdata(20, 1, 0.2, 1, \"Achilles\"))\n\n@pgf Axis(\n    {\n        legend_pos = \"north west\",\n        xlabel = \"distance\",\n        ylabel = \"track time\",\n    },\n    Plot(\n        {\n            scatter,\n            \"only marks\",\n            \"scatter src\"=\"explicit symbolic\",\n            \"scatter/classes\"=\n            {\n                Tortoise = {mark = \"square*\",   \"blue\"},\n                Achilles = {mark = \"triangle*\", \"red\"},\n            }\n        },\n        Table(\n            {\n                x = \"distance\",\n                y = \"tracktime\",\n                meta = \"racer\"\n            },\n            zenon_measurements, # <--- Creating a Table from a DataFrame\n        )\n    ),\n    Legend([\"Tortoise\", \"Achilles\"])\n)\nsavefigs(\"dataframes\", ans) # hide","category":"page"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"(Image: )","category":"page"},{"location":"examples/juliatypes/#Contour.jl","page":"Julia types","title":"Contour.jl","text":"","category":"section"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"A Table of a contour from the Contour.jl package will print as .tex in a format that is good to use with contour_prepared.","category":"page"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"using Contour\nx = 0.0:0.1:2π\ny = 0.0:0.1:2π\nf = (x,y) -> sin(x)*sin(y)\n@pgf Plot({\n        contour_prepared,\n        very_thick\n    },\n    Table(contours(x, y, f.(x, y'), 6)))\nsavefigs(\"contour\", ans) # hide","category":"page"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"(Image: )","category":"page"},{"location":"examples/juliatypes/#StatsBase.jl","page":"Julia types","title":"StatsBase.jl","text":"","category":"section"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"StatsBase.Histogram can be plotted using Table, both for 1D and 2D histograms.","category":"page"},{"location":"examples/juliatypes/#D","page":"Julia types","title":"1D","text":"","category":"section"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"using StatsBase: Histogram, fit\n@pgf Axis(\n    {\n        \"ybar interval\",\n        \"xticklabel interval boundaries\",\n        xmajorgrids = false,\n        xticklabel = raw\"$[\\pgfmathprintnumber\\tick,\\pgfmathprintnumber\\nexttick)$\",\n        \"xticklabel style\" =\n        {\n            font = raw\"\\tiny\"\n        },\n    },\n    Plot(Table(fit(Histogram, range(0; stop = 1, length = 100).^3, closed = :left))))\nsavefigs(\"histogram-1d\", ans) # hide","category":"page"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"(Image: )","category":"page"},{"location":"examples/juliatypes/#D-2","page":"Julia types","title":"2D","text":"","category":"section"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"using StatsBase: Histogram, fit\nw = range(-1; stop = 1, length = 100) .^ 3\nxy = vec(tuple.(w, w'))\nh = fit(Histogram, (first.(xy), last.(xy)), closed = :left)\n@pgf Axis(\n    {\n        view = (0, 90),\n        colorbar,\n        \"colormap/jet\"\n    },\n    Plot3(\n        {\n            surf,\n            shader = \"flat\",\n\n        },\n        Table(h))\n)\nsavefigs(\"histogram-2d\", ans) # hide","category":"page"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"(Image: )","category":"page"},{"location":"examples/juliatypes/#ECDF","page":"Julia types","title":"ECDF","text":"","category":"section"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"Empirical cumulative distribution functions (from StatsBase.ecdf) can be plotted using Table, automatically generating a grid on the range of the input data. The optional argument n selects the number of gridpoints.","category":"page"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"note: Note\nThis feature requires StatsBase v0.26.0 or later.","category":"page"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"using StatsBase: ecdf\nx = randn(1000) # random standard normal values\n@pgf Axis(\n    {\n        xlabel = \"x\",\n        ylabel = \"ecdf\"\n    },\n    Plot(\n        {\n            no_marks,\n            thick,\n            red\n        },\n        Table(ecdf(x)))\n)\nsavefigs(\"ecdf\", ans) # hide","category":"page"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"(Image: )","category":"page"},{"location":"examples/juliatypes/#Measurements.jl","page":"Julia types","title":"Measurements.jl","text":"","category":"section"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"Vectors of Measurement can be plotted using Coordinates in 2D.","category":"page"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"using Measurements\nx = [measurement(x, 0.1 + 0.1*rand()) for x in -5:1.0:5]\ny = x.^2\n\n@pgf Axis(\n    {\n        \"error bars/error bar style\" =\n        {\n            very_thin,\n        },\n    },\n    Plot(\n        {\n            only_marks,\n            mark = \"star\",\n            \"error bars/y dir=both\",\n            \"error bars/y explicit\",\n        },\n        Coordinates(x, y)\n    )\n)\nsavefigs(\"measurements\", ans) # hide","category":"page"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/juliatypes/","page":"Julia types","title":"Julia types","text":"(Image: )","category":"page"},{"location":"#PGFPlotsX","page":"Home","title":"PGFPlotsX","text":"","category":"section"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PGFPlotsX is a Julia package for creating publication quality figures using the LaTeX library PGFPlots as the backend. PGFPlots has extensive documentation (pdf) and a rich database of answered questions on places like stack overflow and tex.stackexchange. In order to take advantage of this, the syntax in PGFPlotsX is similar to the one written in tex. It is therefore, usually, easy to translate a PGFPlots example written in tex to PGFPlotsX Julia code. The advantage of using PGFPlotsX.jl over writing raw LaTeX code is that it is possible to use Julia objects directly in the figures. Furthermore, the figures can be previewed in notebooks and IDE's, like julia-vscode. It is, for example, possible to directly use a DataFrame from DataFrames.jl as a PGFPlots table.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nIn this manual, “PGFPlots” refers to the LaTeX package, its constructs and syntax.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pkg.add(\"PGFPlotsX\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"PGFPlots.jl requires a LaTeX installation with the PGFPlots package installed. We recommend using a LaTeX installation with access to lualatex since it can have significantly better performance over pdflatex.","category":"page"},{"location":"","page":"Home","title":"Home","text":"To generate or preview figures in svg (like is done by default in Jupyter notebooks) pdf2svg is required. This can obtained by, on Ubuntu, running sudo apt-get install pdf2svg, on RHEL/Fedora sudo dnf install pdf2svg and on macOS e.g. brew install pdf2svg. On Windows, the binary can be downloaded from here; be sure to add pdf2svg to the PATH.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For png figures pdftoppm is required. This should by default on Linux and on macOS should be available after running brew install poppler. It is also available in the Xpdf tools archive.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nIf you installed a new LaTeX engine, pdf2svg or pdftoppm after you installed PGFPlotsX you need to run Pkg.build(\"PGFPlotsX\") for this to be reflected. The output from Pkg.build should tell you what LaTeX engines and figure-converters it finds.","category":"page"},{"location":"#Learning-about-PGFPlots","page":"Home","title":"Learning about PGFPlots","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PGFPlotsX does not replicate the PGFPlots documentation. In order to make the best use of this library, you should become familiar with at least the outline of the PGFPlots manual, so that you know about features (plot types, controlling axes and appearance, …) and can look them up when they are needed. If you have PGFPlots installed, a local copy of this manual should be accessible; for example in TeXLive you can open it with","category":"page"},{"location":"","page":"Home","title":"Home","text":"texdoc pgfplots","category":"page"},{"location":"","page":"Home","title":"Home","text":"Studying this documentation, especially the manual gallery and other related examples, you will gain a good understanding of how Julia code can be used to generate LaTeX output for PGFPlots easily.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Other useful sources of examples include:","category":"page"},{"location":"","page":"Home","title":"Home","text":"the PGFplots examples gallery,\nthe collection of plots from the reference manuals.","category":"page"},{"location":"examples/tables/#Tables","page":"Tables","title":"Tables","text":"","category":"section"},{"location":"examples/tables/","page":"Tables","title":"Tables","text":"Tables are coordinates in a tabular format (essentially a matrix), optionally with named columns. They have various constructors, for direct construction and also for conversion from other types.","category":"page"},{"location":"examples/tables/","page":"Tables","title":"Tables","text":"using PGFPlotsX\nsavefigs = (figname, obj) -> begin\n    pgfsave(figname * \".pdf\", obj)\n    run(`pdftocairo -svg -l  1 $(figname * \".pdf\") $(figname * \".svg\")`)\n    pgfsave(figname * \".tex\", obj);\n    return nothing\nend","category":"page"},{"location":"examples/tables/#Unnamed-columns","page":"Tables","title":"Unnamed columns","text":"","category":"section"},{"location":"examples/tables/","page":"Tables","title":"Tables","text":"Let","category":"page"},{"location":"examples/tables/","page":"Tables","title":"Tables","text":"x = range(0; stop = 2*pi, length = 100)\ny = sin.(x)","category":"page"},{"location":"examples/tables/","page":"Tables","title":"Tables","text":"x = range(0; stop = 2*pi, length = 100)\ny = sin.(x)","category":"page"},{"location":"examples/tables/","page":"Tables","title":"Tables","text":"You can pass these coordinates in unnamed columns:","category":"page"},{"location":"examples/tables/","page":"Tables","title":"Tables","text":"Plot(Table([x, y]))\nsavefigs(\"table-unnamed-columns\", ans) # hide","category":"page"},{"location":"examples/tables/","page":"Tables","title":"Tables","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/tables/","page":"Tables","title":"Tables","text":"(Image: )","category":"page"},{"location":"examples/tables/#Named-columns","page":"Tables","title":"Named columns","text":"","category":"section"},{"location":"examples/tables/","page":"Tables","title":"Tables","text":"Or named columns:","category":"page"},{"location":"examples/tables/","page":"Tables","title":"Tables","text":"Plot(Table([:x => x, :y => y]))\nsavefigs(\"table-named-columns\", ans) # hide","category":"page"},{"location":"examples/tables/","page":"Tables","title":"Tables","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/tables/","page":"Tables","title":"Tables","text":"(Image: )","category":"page"},{"location":"examples/tables/#Rename-options","page":"Tables","title":"Rename options","text":"","category":"section"},{"location":"examples/tables/","page":"Tables","title":"Tables","text":"The columns can be renamed using options:","category":"page"},{"location":"examples/tables/","page":"Tables","title":"Tables","text":"@pgf Plot(\n    {\n        x = \"a\",\n        y = \"b\",\n    },\n    Table([:a => x, :b => y]))\nsavefigs(\"table-dict-rename\", ans) # hide","category":"page"},{"location":"examples/tables/","page":"Tables","title":"Tables","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/tables/","page":"Tables","title":"Tables","text":"(Image: )","category":"page"},{"location":"examples/tables/#Excluding-points","page":"Tables","title":"Excluding points","text":"","category":"section"},{"location":"examples/tables/","page":"Tables","title":"Tables","text":"In the example below, we use a matrix of values with edge vectors, and omit the points outside the unit circle:","category":"page"},{"location":"examples/tables/","page":"Tables","title":"Tables","text":"x = range(-1; stop = 1, length = 20)\nz = @. 1 - √(abs2(x) + abs2(x'))\nz[z .≤ 0] .= -Inf\n@pgf Axis(\n    {\n        colorbar,\n        \"colormap/jet\",\n        \"unbounded coords\" = \"jump\"\n    },\n    Plot3(\n        {\n            surf,\n            shader = \"flat\",\n        },\n        Table(x, x, z)\n    )\n)\nsavefigs(\"table-jump-3d\", ans) # hide","category":"page"},{"location":"examples/tables/","page":"Tables","title":"Tables","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/tables/","page":"Tables","title":"Tables","text":"(Image: )","category":"page"},{"location":"examples/tables/#Quiver-plot","page":"Tables","title":"Quiver plot","text":"","category":"section"},{"location":"examples/tables/","page":"Tables","title":"Tables","text":"A quiver plot can be created as:","category":"page"},{"location":"examples/tables/","page":"Tables","title":"Tables","text":"x = -2pi:0.2:2*pi\ny = sin.(x)\n\nu = ones(length(x))\nv = cos.(x)\n\n@pgf Axis(\n    {\n        title = \"Quiver plot\",\n        grid = \"both\"\n    },\n    Plot(\n        {\n            quiver = {u = \"\\\\thisrow{u}\", v = \"\\\\thisrow{v}\"},\n            \"-stealth\"\n        },\n        Table(x = x, y = y, u = u, v = v)\n    ),\n    LegendEntry(\"\\$\\\\cos(x)\\$\"),\n    Plot(\n        {\n            color = \"red\",\n            very_thick\n        },\n        Coordinates(x, y)\n    ),\n    LegendEntry(\"\\$\\\\sin(x)\\$\")\n)\nsavefigs(\"quiver\", ans) # hide","category":"page"},{"location":"examples/tables/","page":"Tables","title":"Tables","text":"[.pdf], [generated .tex]","category":"page"},{"location":"examples/tables/","page":"Tables","title":"Tables","text":"(Image: )","category":"page"}]
}
